/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLinkAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkLinkParserRuleCall_2_0 = (RuleCall)cLinkAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLinkAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_3_1_0 = (RuleCall)cLinkAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cJointAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cJointJointParserRuleCall_4_0_0 = (RuleCall)cJointAssignment_4_0.eContents().get(0);
		private final Assignment cJointAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_4_1_0 = (RuleCall)cJointAssignment_4_1.eContents().get(0);
		
		/// *
		// * Todo: 
		// * Expressions
		// * Defaults
		// * ReUse
		// * Constants
		// * / Robot uRDF::Robot:
		//	'RobotName' name=STRING
		//	link+=Link ("," link+=Link)* (joint+=Joint joint+=Joint*)?
		@Override public ParserRule getRule() { return rule; }
		
		//'RobotName' name=STRING link+=Link ("," link+=Link)* (joint+=Joint joint+=Joint*)?
		public Group getGroup() { return cGroup; }
		
		//'RobotName'
		public Keyword getRobotNameKeyword_0() { return cRobotNameKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//link+=Link
		public Assignment getLinkAssignment_2() { return cLinkAssignment_2; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_2_0() { return cLinkLinkParserRuleCall_2_0; }
		
		//("," link+=Link)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//link+=Link
		public Assignment getLinkAssignment_3_1() { return cLinkAssignment_3_1; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_3_1_0() { return cLinkLinkParserRuleCall_3_1_0; }
		
		//(joint+=Joint joint+=Joint*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//joint+=Joint
		public Assignment getJointAssignment_4_0() { return cJointAssignment_4_0; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_0_0() { return cJointJointParserRuleCall_4_0_0; }
		
		//joint+=Joint*
		public Assignment getJointAssignment_4_1() { return cJointAssignment_4_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_1_0() { return cJointJointParserRuleCall_4_1_0; }
	}
	public class MaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaterial_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTextureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Material uRDF::Material:
		//	Material_Impl | Color | Texture
		@Override public ParserRule getRule() { return rule; }
		
		//Material_Impl | Color | Texture
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Material_Impl
		public RuleCall getMaterial_ImplParserRuleCall_0() { return cMaterial_ImplParserRuleCall_0; }
		
		//Color
		public RuleCall getColorParserRuleCall_1() { return cColorParserRuleCall_1; }
		
		//Texture
		public RuleCall getTextureParserRuleCall_2() { return cTextureParserRuleCall_2; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGeometry_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCylinderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMeshParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSphereParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Geometry uRDF::Geometry:
		//	Geometry_Impl | Box | Cylinder | Mesh | Sphere
		@Override public ParserRule getRule() { return rule; }
		
		//Geometry_Impl | Box | Cylinder | Mesh | Sphere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Geometry_Impl
		public RuleCall getGeometry_ImplParserRuleCall_0() { return cGeometry_ImplParserRuleCall_0; }
		
		//Box
		public RuleCall getBoxParserRuleCall_1() { return cBoxParserRuleCall_1; }
		
		//Cylinder
		public RuleCall getCylinderParserRuleCall_2() { return cCylinderParserRuleCall_2; }
		
		//Mesh
		public RuleCall getMeshParserRuleCall_3() { return cMeshParserRuleCall_3; }
		
		//Sphere
		public RuleCall getSphereParserRuleCall_4() { return cSphereParserRuleCall_4; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInertialKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInertialAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInertialInertialParserRuleCall_3_1_0 = (RuleCall)cInertialAssignment_3_1.eContents().get(0);
		private final Assignment cInertialAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInertialInertialParserRuleCall_3_2_0 = (RuleCall)cInertialAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVisualsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVisualsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVisualsVisualParserRuleCall_4_1_0 = (RuleCall)cVisualsAssignment_4_1.eContents().get(0);
		private final Assignment cVisualsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVisualsVisualParserRuleCall_4_2_0 = (RuleCall)cVisualsAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCollisionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCollisionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCollisionCollisionParserRuleCall_5_1_0 = (RuleCall)cCollisionAssignment_5_1.eContents().get(0);
		private final Assignment cCollisionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCollisionCollisionParserRuleCall_5_2_0 = (RuleCall)cCollisionAssignment_5_2.eContents().get(0);
		
		//Link uRDF::Link:
		//	{uRDF::Link}
		//	'Link' name=ID ('inertial' inertial+=Inertial inertial+=Inertial*)? ('visuals' visuals+=Visual visuals+=Visual*)?
		//	('collision' collision+=Collision collision+=Collision*)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Link} 'Link' name=ID ('inertial' inertial+=Inertial inertial+=Inertial*)? ('visuals' visuals+=Visual
		//visuals+=Visual*)? ('collision' collision+=Collision collision+=Collision*)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Link}
		public Action getLinkAction_0() { return cLinkAction_0; }
		
		//'Link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('inertial' inertial+=Inertial inertial+=Inertial*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'inertial'
		public Keyword getInertialKeyword_3_0() { return cInertialKeyword_3_0; }
		
		//inertial+=Inertial
		public Assignment getInertialAssignment_3_1() { return cInertialAssignment_3_1; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_1_0() { return cInertialInertialParserRuleCall_3_1_0; }
		
		//inertial+=Inertial*
		public Assignment getInertialAssignment_3_2() { return cInertialAssignment_3_2; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_2_0() { return cInertialInertialParserRuleCall_3_2_0; }
		
		//('visuals' visuals+=Visual visuals+=Visual*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'visuals'
		public Keyword getVisualsKeyword_4_0() { return cVisualsKeyword_4_0; }
		
		//visuals+=Visual
		public Assignment getVisualsAssignment_4_1() { return cVisualsAssignment_4_1; }
		
		//Visual
		public RuleCall getVisualsVisualParserRuleCall_4_1_0() { return cVisualsVisualParserRuleCall_4_1_0; }
		
		//visuals+=Visual*
		public Assignment getVisualsAssignment_4_2() { return cVisualsAssignment_4_2; }
		
		//Visual
		public RuleCall getVisualsVisualParserRuleCall_4_2_0() { return cVisualsVisualParserRuleCall_4_2_0; }
		
		//('collision' collision+=Collision collision+=Collision*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'collision'
		public Keyword getCollisionKeyword_5_0() { return cCollisionKeyword_5_0; }
		
		//collision+=Collision
		public Assignment getCollisionAssignment_5_1() { return cCollisionAssignment_5_1; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_5_1_0() { return cCollisionCollisionParserRuleCall_5_1_0; }
		
		//collision+=Collision*
		public Assignment getCollisionAssignment_5_2() { return cCollisionAssignment_5_2; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_5_2_0() { return cCollisionCollisionParserRuleCall_5_2_0; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeJointTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cChildOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildOfAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cChildOfLinkCrossReference_5_0 = (CrossReference)cChildOfAssignment_5.eContents().get(0);
		private final RuleCall cChildOfLinkSTRINGTerminalRuleCall_5_0_1 = (RuleCall)cChildOfLinkCrossReference_5_0.eContents().get(1);
		private final Assignment cChildOfAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cChildOfLinkCrossReference_6_0 = (CrossReference)cChildOfAssignment_6.eContents().get(0);
		private final RuleCall cChildOfLinkSTRINGTerminalRuleCall_6_0_1 = (RuleCall)cChildOfLinkCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cParentOfKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cParentOfAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cParentOfLinkCrossReference_9_0 = (CrossReference)cParentOfAssignment_9.eContents().get(0);
		private final RuleCall cParentOfLinkSTRINGTerminalRuleCall_9_0_1 = (RuleCall)cParentOfLinkCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLimitKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cLimitAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_10_1_0 = (RuleCall)cLimitAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAxisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAxisAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_11_1_0 = (RuleCall)cAxisAssignment_11_1.eContents().get(0);
		private final Keyword cOriginKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cOriginAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cOriginOriginParserRuleCall_13_0 = (RuleCall)cOriginAssignment_13.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cCallibrationKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cCallibrationAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cCallibrationCallibrationParserRuleCall_14_1_0 = (RuleCall)cCallibrationAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cDynamicsKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cDynamicsAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cDynamicsDynamicsParserRuleCall_15_1_0 = (RuleCall)cDynamicsAssignment_15_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cMimicKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cMimicAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cMimicMimicParserRuleCall_16_1_0 = (RuleCall)cMimicAssignment_16_1.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cSafetycontrollerKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cSafetycontrollerAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cSafetycontrollerSafetyControllerParserRuleCall_17_1_0 = (RuleCall)cSafetycontrollerAssignment_17_1.eContents().get(0);
		
		//Joint uRDF::Joint:
		//	'Joint' name=ID ('Type' Type=JointType)?
		//	'ChildOf' '(' ChildOf+=[uRDF::Link|STRING] ChildOf+=[uRDF::Link|STRING]* ')'
		//	'ParentOf' ParentOf=[uRDF::Link|STRING] ('limit' limit=Limit)? ('axis' axis=Axis)?
		//	'origin' origin=Origin ('callibration' callibration=Callibration)? ('dynamics' dynamics=Dynamics)? ('mimic'
		//	mimic=Mimic)? ('safetycontroller' safetycontroller=SafetyController)?
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID ('Type' Type=JointType)? 'ChildOf' '(' ChildOf+=[uRDF::Link|STRING] ChildOf+=[uRDF::Link|STRING]* ')'
		//'ParentOf' ParentOf=[uRDF::Link|STRING] ('limit' limit=Limit)? ('axis' axis=Axis)? 'origin' origin=Origin
		//('callibration' callibration=Callibration)? ('dynamics' dynamics=Dynamics)? ('mimic' mimic=Mimic)? ('safetycontroller'
		//safetycontroller=SafetyController)?
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('Type' Type=JointType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Type'
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }
		
		//Type=JointType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_2_1_0() { return cTypeJointTypeEnumRuleCall_2_1_0; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_3() { return cChildOfKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//ChildOf+=[uRDF::Link|STRING]
		public Assignment getChildOfAssignment_5() { return cChildOfAssignment_5; }
		
		//[uRDF::Link|STRING]
		public CrossReference getChildOfLinkCrossReference_5_0() { return cChildOfLinkCrossReference_5_0; }
		
		//STRING
		public RuleCall getChildOfLinkSTRINGTerminalRuleCall_5_0_1() { return cChildOfLinkSTRINGTerminalRuleCall_5_0_1; }
		
		//ChildOf+=[uRDF::Link|STRING]*
		public Assignment getChildOfAssignment_6() { return cChildOfAssignment_6; }
		
		//[uRDF::Link|STRING]
		public CrossReference getChildOfLinkCrossReference_6_0() { return cChildOfLinkCrossReference_6_0; }
		
		//STRING
		public RuleCall getChildOfLinkSTRINGTerminalRuleCall_6_0_1() { return cChildOfLinkSTRINGTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_8() { return cParentOfKeyword_8; }
		
		//ParentOf=[uRDF::Link|STRING]
		public Assignment getParentOfAssignment_9() { return cParentOfAssignment_9; }
		
		//[uRDF::Link|STRING]
		public CrossReference getParentOfLinkCrossReference_9_0() { return cParentOfLinkCrossReference_9_0; }
		
		//STRING
		public RuleCall getParentOfLinkSTRINGTerminalRuleCall_9_0_1() { return cParentOfLinkSTRINGTerminalRuleCall_9_0_1; }
		
		//('limit' limit=Limit)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'limit'
		public Keyword getLimitKeyword_10_0() { return cLimitKeyword_10_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_10_1() { return cLimitAssignment_10_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_10_1_0() { return cLimitLimitParserRuleCall_10_1_0; }
		
		//('axis' axis=Axis)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'axis'
		public Keyword getAxisKeyword_11_0() { return cAxisKeyword_11_0; }
		
		//axis=Axis
		public Assignment getAxisAssignment_11_1() { return cAxisAssignment_11_1; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_11_1_0() { return cAxisAxisParserRuleCall_11_1_0; }
		
		//'origin'
		public Keyword getOriginKeyword_12() { return cOriginKeyword_12; }
		
		//origin=Origin
		public Assignment getOriginAssignment_13() { return cOriginAssignment_13; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_13_0() { return cOriginOriginParserRuleCall_13_0; }
		
		//('callibration' callibration=Callibration)?
		public Group getGroup_14() { return cGroup_14; }
		
		//'callibration'
		public Keyword getCallibrationKeyword_14_0() { return cCallibrationKeyword_14_0; }
		
		//callibration=Callibration
		public Assignment getCallibrationAssignment_14_1() { return cCallibrationAssignment_14_1; }
		
		//Callibration
		public RuleCall getCallibrationCallibrationParserRuleCall_14_1_0() { return cCallibrationCallibrationParserRuleCall_14_1_0; }
		
		//('dynamics' dynamics=Dynamics)?
		public Group getGroup_15() { return cGroup_15; }
		
		//'dynamics'
		public Keyword getDynamicsKeyword_15_0() { return cDynamicsKeyword_15_0; }
		
		//dynamics=Dynamics
		public Assignment getDynamicsAssignment_15_1() { return cDynamicsAssignment_15_1; }
		
		//Dynamics
		public RuleCall getDynamicsDynamicsParserRuleCall_15_1_0() { return cDynamicsDynamicsParserRuleCall_15_1_0; }
		
		//('mimic' mimic=Mimic)?
		public Group getGroup_16() { return cGroup_16; }
		
		//'mimic'
		public Keyword getMimicKeyword_16_0() { return cMimicKeyword_16_0; }
		
		//mimic=Mimic
		public Assignment getMimicAssignment_16_1() { return cMimicAssignment_16_1; }
		
		//Mimic
		public RuleCall getMimicMimicParserRuleCall_16_1_0() { return cMimicMimicParserRuleCall_16_1_0; }
		
		//('safetycontroller' safetycontroller=SafetyController)?
		public Group getGroup_17() { return cGroup_17; }
		
		//'safetycontroller'
		public Keyword getSafetycontrollerKeyword_17_0() { return cSafetycontrollerKeyword_17_0; }
		
		//safetycontroller=SafetyController
		public Assignment getSafetycontrollerAssignment_17_1() { return cSafetycontrollerAssignment_17_1; }
		
		//SafetyController
		public RuleCall getSafetycontrollerSafetyControllerParserRuleCall_17_1_0() { return cSafetycontrollerSafetyControllerParserRuleCall_17_1_0; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOriginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOriginOriginParserRuleCall_1_0 = (RuleCall)cOriginAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMassKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_2_1_0 = (RuleCall)cMassAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cMassAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_2_2_1_0 = (RuleCall)cMassAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInertiaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInertiaAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInertiaInertiaParserRuleCall_3_1_0 = (RuleCall)cInertiaAssignment_3_1.eContents().get(0);
		private final Assignment cInertiaAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInertiaInertiaParserRuleCall_3_2_0 = (RuleCall)cInertiaAssignment_3_2.eContents().get(0);
		
		//Inertial uRDF::Inertial:
		//	'origin' origin=Origin ('mass' mass+=Mass ("," mass+=Mass)*)? ('inertia' inertia+=Inertia inertia+=Inertia*)?
		@Override public ParserRule getRule() { return rule; }
		
		//'origin' origin=Origin ('mass' mass+=Mass ("," mass+=Mass)*)? ('inertia' inertia+=Inertia inertia+=Inertia*)?
		public Group getGroup() { return cGroup; }
		
		//'origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//origin=Origin
		public Assignment getOriginAssignment_1() { return cOriginAssignment_1; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_1_0() { return cOriginOriginParserRuleCall_1_0; }
		
		//('mass' mass+=Mass ("," mass+=Mass)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'mass'
		public Keyword getMassKeyword_2_0() { return cMassKeyword_2_0; }
		
		//mass+=Mass
		public Assignment getMassAssignment_2_1() { return cMassAssignment_2_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_2_1_0() { return cMassMassParserRuleCall_2_1_0; }
		
		//("," mass+=Mass)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//mass+=Mass
		public Assignment getMassAssignment_2_2_1() { return cMassAssignment_2_2_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_2_2_1_0() { return cMassMassParserRuleCall_2_2_1_0; }
		
		//('inertia' inertia+=Inertia inertia+=Inertia*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'inertia'
		public Keyword getInertiaKeyword_3_0() { return cInertiaKeyword_3_0; }
		
		//inertia+=Inertia
		public Assignment getInertiaAssignment_3_1() { return cInertiaAssignment_3_1; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_3_1_0() { return cInertiaInertiaParserRuleCall_3_1_0; }
		
		//inertia+=Inertia*
		public Assignment getInertiaAssignment_3_2() { return cInertiaAssignment_3_2; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_3_2_0() { return cInertiaInertiaParserRuleCall_3_2_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cMaterialKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMaterialAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMaterialMaterialParserRuleCall_0_1_0 = (RuleCall)cMaterialAssignment_0_1.eContents().get(0);
		private final Keyword cOriginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOriginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOriginOriginParserRuleCall_2_0 = (RuleCall)cOriginAssignment_2.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		
		//Visual uRDF::Visual:
		//	('material' material=Material)?
		//	'origin' origin=Origin
		//	'geometry' geometry=Geometry
		@Override public ParserRule getRule() { return rule; }
		
		//('material' material=Material)? 'origin' origin=Origin 'geometry' geometry=Geometry
		public Group getGroup() { return cGroup; }
		
		//('material' material=Material)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'material'
		public Keyword getMaterialKeyword_0_0() { return cMaterialKeyword_0_0; }
		
		//material=Material
		public Assignment getMaterialAssignment_0_1() { return cMaterialAssignment_0_1; }
		
		//Material
		public RuleCall getMaterialMaterialParserRuleCall_0_1_0() { return cMaterialMaterialParserRuleCall_0_1_0; }
		
		//'origin'
		public Keyword getOriginKeyword_1() { return cOriginKeyword_1; }
		
		//origin=Origin
		public Assignment getOriginAssignment_2() { return cOriginAssignment_2; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_2_0() { return cOriginOriginParserRuleCall_2_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeometryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeometryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeometryGeometryParserRuleCall_1_0 = (RuleCall)cGeometryAssignment_1.eContents().get(0);
		private final Keyword cOriginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOriginAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOriginOriginParserRuleCall_3_0 = (RuleCall)cOriginAssignment_3.eContents().get(0);
		
		//Collision uRDF::Collision:
		//	'geometry' geometry=Geometry
		//	'origin' origin=Origin
		@Override public ParserRule getRule() { return rule; }
		
		//'geometry' geometry=Geometry 'origin' origin=Origin
		public Group getGroup() { return cGroup; }
		
		//'geometry'
		public Keyword getGeometryKeyword_0() { return cGeometryKeyword_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_1() { return cGeometryAssignment_1; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_1_0() { return cGeometryGeometryParserRuleCall_1_0; }
		
		//'origin'
		public Keyword getOriginKeyword_2() { return cOriginKeyword_2; }
		
		//origin=Origin
		public Assignment getOriginAssignment_3() { return cOriginAssignment_3; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_3_0() { return cOriginOriginParserRuleCall_3_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOriginAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_1_0 = (RuleCall)cXAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cYKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cYAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cYINTTerminalRuleCall_2_1_0 = (RuleCall)cYAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cZKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cZAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cZINTTerminalRuleCall_3_1_0 = (RuleCall)cZAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRollKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRollAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRollINTTerminalRuleCall_4_1_0 = (RuleCall)cRollAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPitchKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPitchAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPitchINTTerminalRuleCall_5_1_0 = (RuleCall)cPitchAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cYawKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cYawAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cYawINTTerminalRuleCall_6_1_0 = (RuleCall)cYawAssignment_6_1.eContents().get(0);
		
		//Origin uRDF::Origin:
		//	{uRDF::Origin} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)? ('Roll' Roll=INT)? ('Pitch' Pitch=INT)? ('Yaw' Yaw=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Origin} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)? ('Roll' Roll=INT)? ('Pitch' Pitch=INT)? ('Yaw' Yaw=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Origin}
		public Action getOriginAction_0() { return cOriginAction_0; }
		
		//('x' x=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'x'
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//x=INT
		public Assignment getXAssignment_1_1() { return cXAssignment_1_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_1_0() { return cXINTTerminalRuleCall_1_1_0; }
		
		//('y' y=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'y'
		public Keyword getYKeyword_2_0() { return cYKeyword_2_0; }
		
		//y=INT
		public Assignment getYAssignment_2_1() { return cYAssignment_2_1; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_1_0() { return cYINTTerminalRuleCall_2_1_0; }
		
		//('z' z=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'z'
		public Keyword getZKeyword_3_0() { return cZKeyword_3_0; }
		
		//z=INT
		public Assignment getZAssignment_3_1() { return cZAssignment_3_1; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_3_1_0() { return cZINTTerminalRuleCall_3_1_0; }
		
		//('Roll' Roll=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Roll'
		public Keyword getRollKeyword_4_0() { return cRollKeyword_4_0; }
		
		//Roll=INT
		public Assignment getRollAssignment_4_1() { return cRollAssignment_4_1; }
		
		//INT
		public RuleCall getRollINTTerminalRuleCall_4_1_0() { return cRollINTTerminalRuleCall_4_1_0; }
		
		//('Pitch' Pitch=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Pitch'
		public Keyword getPitchKeyword_5_0() { return cPitchKeyword_5_0; }
		
		//Pitch=INT
		public Assignment getPitchAssignment_5_1() { return cPitchAssignment_5_1; }
		
		//INT
		public RuleCall getPitchINTTerminalRuleCall_5_1_0() { return cPitchINTTerminalRuleCall_5_1_0; }
		
		//('Yaw' Yaw=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'Yaw'
		public Keyword getYawKeyword_6_0() { return cYawKeyword_6_0; }
		
		//Yaw=INT
		public Assignment getYawAssignment_6_1() { return cYawAssignment_6_1; }
		
		//INT
		public RuleCall getYawINTTerminalRuleCall_6_1_0() { return cYawINTTerminalRuleCall_6_1_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mass uRDF::Mass:
		//	{uRDF::Mass}
		//	'Mass'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mass} 'Mass'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Inertia uRDF::Inertia:
		//	{uRDF::Inertia}
		//	'Inertia'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Inertia} 'Inertia'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
	}
	public class Material_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Material_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMaterialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMaterialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Material_Impl uRDF::Material:
		//	{uRDF::Material}
		//	'Material'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Material} 'Material'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Material}
		public Action getMaterialAction_0() { return cMaterialAction_0; }
		
		//'Material'
		public Keyword getMaterialKeyword_1() { return cMaterialKeyword_1; }
	}
	public class Geometry_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Geometry_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGeometryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Geometry_Impl uRDF::Geometry:
		//	{uRDF::Geometry}
		//	'Geometry'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Geometry} 'Geometry'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_1() { return cGeometryKeyword_1; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Color uRDF::Color:
		//	{uRDF::Color}
		//	'Color'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Color} 'Color'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Color}
		public Action getColorAction_0() { return cColorAction_0; }
		
		//'Color'
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }
	}
	public class TextureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Texture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Texture uRDF::Texture:
		//	{uRDF::Texture}
		//	'Texture'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Texture} 'Texture'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Texture}
		public Action getTextureAction_0() { return cTextureAction_0; }
		
		//'Texture'
		public Keyword getTextureKeyword_1() { return cTextureKeyword_1; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Box uRDF::Box:
		//	{uRDF::Box}
		//	'Box'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Box} 'Box'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Box}
		public Action getBoxAction_0() { return cBoxAction_0; }
		
		//'Box'
		public Keyword getBoxKeyword_1() { return cBoxKeyword_1; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCylinderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCylinderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Cylinder uRDF::Cylinder:
		//	{uRDF::Cylinder}
		//	'Cylinder'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Cylinder} 'Cylinder'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Cylinder}
		public Action getCylinderAction_0() { return cCylinderAction_0; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_1() { return cCylinderKeyword_1; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeshAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeshKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mesh uRDF::Mesh:
		//	{uRDF::Mesh}
		//	'Mesh'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mesh} 'Mesh'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mesh}
		public Action getMeshAction_0() { return cMeshAction_0; }
		
		//'Mesh'
		public Keyword getMeshKeyword_1() { return cMeshKeyword_1; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSphereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSphereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sphere uRDF::Sphere:
		//	{uRDF::Sphere}
		//	'Sphere'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Sphere} 'Sphere'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Sphere}
		public Action getSphereAction_0() { return cSphereAction_0; }
		
		//'Sphere'
		public Keyword getSphereKeyword_1() { return cSphereKeyword_1; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLowerKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLowerINTTerminalRuleCall_1_1_0 = (RuleCall)cLowerAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUpperKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpperAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUpperINTTerminalRuleCall_2_1_0 = (RuleCall)cUpperAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEffortKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffortINTTerminalRuleCall_3_1_0 = (RuleCall)cEffortAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVelocityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVelocityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVelocityINTTerminalRuleCall_4_1_0 = (RuleCall)cVelocityAssignment_4_1.eContents().get(0);
		
		//Limit uRDF::Limit:
		//	{uRDF::Limit} ('Lower' Lower=INT)? ('Upper' Upper=INT)? ('Effort' Effort=INT)? ('Velocity' Velocity=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Limit} ('Lower' Lower=INT)? ('Upper' Upper=INT)? ('Effort' Effort=INT)? ('Velocity' Velocity=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Limit}
		public Action getLimitAction_0() { return cLimitAction_0; }
		
		//('Lower' Lower=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Lower'
		public Keyword getLowerKeyword_1_0() { return cLowerKeyword_1_0; }
		
		//Lower=INT
		public Assignment getLowerAssignment_1_1() { return cLowerAssignment_1_1; }
		
		//INT
		public RuleCall getLowerINTTerminalRuleCall_1_1_0() { return cLowerINTTerminalRuleCall_1_1_0; }
		
		//('Upper' Upper=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Upper'
		public Keyword getUpperKeyword_2_0() { return cUpperKeyword_2_0; }
		
		//Upper=INT
		public Assignment getUpperAssignment_2_1() { return cUpperAssignment_2_1; }
		
		//INT
		public RuleCall getUpperINTTerminalRuleCall_2_1_0() { return cUpperINTTerminalRuleCall_2_1_0; }
		
		//('Effort' Effort=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Effort'
		public Keyword getEffortKeyword_3_0() { return cEffortKeyword_3_0; }
		
		//Effort=INT
		public Assignment getEffortAssignment_3_1() { return cEffortAssignment_3_1; }
		
		//INT
		public RuleCall getEffortINTTerminalRuleCall_3_1_0() { return cEffortINTTerminalRuleCall_3_1_0; }
		
		//('Velocity' Velocity=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Velocity'
		public Keyword getVelocityKeyword_4_0() { return cVelocityKeyword_4_0; }
		
		//Velocity=INT
		public Assignment getVelocityAssignment_4_1() { return cVelocityAssignment_4_1; }
		
		//INT
		public RuleCall getVelocityINTTerminalRuleCall_4_1_0() { return cVelocityINTTerminalRuleCall_4_1_0; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxisAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cXKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_1_0 = (RuleCall)cXAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cYKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cYAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cYINTTerminalRuleCall_2_1_0 = (RuleCall)cYAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cZKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cZAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cZINTTerminalRuleCall_3_1_0 = (RuleCall)cZAssignment_3_1.eContents().get(0);
		
		//Axis uRDF::Axis:
		//	{uRDF::Axis} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Axis} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Axis}
		public Action getAxisAction_0() { return cAxisAction_0; }
		
		//('x' x=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'x'
		public Keyword getXKeyword_1_0() { return cXKeyword_1_0; }
		
		//x=INT
		public Assignment getXAssignment_1_1() { return cXAssignment_1_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_1_0() { return cXINTTerminalRuleCall_1_1_0; }
		
		//('y' y=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'y'
		public Keyword getYKeyword_2_0() { return cYKeyword_2_0; }
		
		//y=INT
		public Assignment getYAssignment_2_1() { return cYAssignment_2_1; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_1_0() { return cYINTTerminalRuleCall_2_1_0; }
		
		//('z' z=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'z'
		public Keyword getZKeyword_3_0() { return cZKeyword_3_0; }
		
		//z=INT
		public Assignment getZAssignment_3_1() { return cZAssignment_3_1; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_3_1_0() { return cZINTTerminalRuleCall_3_1_0; }
	}
	public class CallibrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Callibration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallibrationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRisingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRisingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRisingSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cRisingAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFallingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFallingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFallingSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cFallingAssignment_2_1.eContents().get(0);
		
		//Callibration uRDF::Callibration:
		//	{uRDF::Callibration} ('Rising' Rising=STRING)? ('Falling' Falling=STRING)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Callibration} ('Rising' Rising=STRING)? ('Falling' Falling=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Callibration}
		public Action getCallibrationAction_0() { return cCallibrationAction_0; }
		
		//('Rising' Rising=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Rising'
		public Keyword getRisingKeyword_1_0() { return cRisingKeyword_1_0; }
		
		//Rising=STRING
		public Assignment getRisingAssignment_1_1() { return cRisingAssignment_1_1; }
		
		//STRING
		public RuleCall getRisingSTRINGTerminalRuleCall_1_1_0() { return cRisingSTRINGTerminalRuleCall_1_1_0; }
		
		//('Falling' Falling=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Falling'
		public Keyword getFallingKeyword_2_0() { return cFallingKeyword_2_0; }
		
		//Falling=STRING
		public Assignment getFallingAssignment_2_1() { return cFallingAssignment_2_1; }
		
		//STRING
		public RuleCall getFallingSTRINGTerminalRuleCall_2_1_0() { return cFallingSTRINGTerminalRuleCall_2_1_0; }
	}
	public class DynamicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Dynamics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDynamicsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFrictionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFrictionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFrictionINTTerminalRuleCall_1_1_0 = (RuleCall)cFrictionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDampingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDampingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDampingINTTerminalRuleCall_2_1_0 = (RuleCall)cDampingAssignment_2_1.eContents().get(0);
		
		//Dynamics uRDF::Dynamics:
		//	{uRDF::Dynamics} ('Friction' Friction=INT)? ('Damping' Damping=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Dynamics} ('Friction' Friction=INT)? ('Damping' Damping=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Dynamics}
		public Action getDynamicsAction_0() { return cDynamicsAction_0; }
		
		//('Friction' Friction=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Friction'
		public Keyword getFrictionKeyword_1_0() { return cFrictionKeyword_1_0; }
		
		//Friction=INT
		public Assignment getFrictionAssignment_1_1() { return cFrictionAssignment_1_1; }
		
		//INT
		public RuleCall getFrictionINTTerminalRuleCall_1_1_0() { return cFrictionINTTerminalRuleCall_1_1_0; }
		
		//('Damping' Damping=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Damping'
		public Keyword getDampingKeyword_2_0() { return cDampingKeyword_2_0; }
		
		//Damping=INT
		public Assignment getDampingAssignment_2_1() { return cDampingAssignment_2_1; }
		
		//INT
		public RuleCall getDampingINTTerminalRuleCall_2_1_0() { return cDampingINTTerminalRuleCall_2_1_0; }
	}
	public class MimicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mimic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMimicAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cJointKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cJointAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJointSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cJointAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMultiplierKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplierINTTerminalRuleCall_2_1_0 = (RuleCall)cMultiplierAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOffSetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOffSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOffSetINTTerminalRuleCall_3_1_0 = (RuleCall)cOffSetAssignment_3_1.eContents().get(0);
		
		//Mimic uRDF::Mimic:
		//	{uRDF::Mimic} ('Joint' Joint=STRING)? ('Multiplier' Multiplier=INT)? ('OffSet' OffSet=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mimic} ('Joint' Joint=STRING)? ('Multiplier' Multiplier=INT)? ('OffSet' OffSet=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mimic}
		public Action getMimicAction_0() { return cMimicAction_0; }
		
		//('Joint' Joint=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'Joint'
		public Keyword getJointKeyword_1_0() { return cJointKeyword_1_0; }
		
		//Joint=STRING
		public Assignment getJointAssignment_1_1() { return cJointAssignment_1_1; }
		
		//STRING
		public RuleCall getJointSTRINGTerminalRuleCall_1_1_0() { return cJointSTRINGTerminalRuleCall_1_1_0; }
		
		//('Multiplier' Multiplier=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Multiplier'
		public Keyword getMultiplierKeyword_2_0() { return cMultiplierKeyword_2_0; }
		
		//Multiplier=INT
		public Assignment getMultiplierAssignment_2_1() { return cMultiplierAssignment_2_1; }
		
		//INT
		public RuleCall getMultiplierINTTerminalRuleCall_2_1_0() { return cMultiplierINTTerminalRuleCall_2_1_0; }
		
		//('OffSet' OffSet=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'OffSet'
		public Keyword getOffSetKeyword_3_0() { return cOffSetKeyword_3_0; }
		
		//OffSet=INT
		public Assignment getOffSetAssignment_3_1() { return cOffSetAssignment_3_1; }
		
		//INT
		public RuleCall getOffSetINTTerminalRuleCall_3_1_0() { return cOffSetINTTerminalRuleCall_3_1_0; }
	}
	public class SafetyControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SafetyController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyControllerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSoftLowerLimitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSoftLowerLimitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSoftLowerLimitINTTerminalRuleCall_1_1_0 = (RuleCall)cSoftLowerLimitAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSoftUpperLimitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSoftUpperLimitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSoftUpperLimitINTTerminalRuleCall_2_1_0 = (RuleCall)cSoftUpperLimitAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cK_positionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cK_positionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cK_positionINTTerminalRuleCall_3_1_0 = (RuleCall)cK_positionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cK_velocityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cK_velocityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cK_velocityINTTerminalRuleCall_4_1_0 = (RuleCall)cK_velocityAssignment_4_1.eContents().get(0);
		
		//SafetyController uRDF::SafetyController:
		//	{uRDF::SafetyController} ('SoftLowerLimit' SoftLowerLimit=INT)? ('SoftUpperLimit' SoftUpperLimit=INT)? ('k_position'
		//	k_position=INT)? ('k_velocity' k_velocity=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::SafetyController} ('SoftLowerLimit' SoftLowerLimit=INT)? ('SoftUpperLimit' SoftUpperLimit=INT)? ('k_position'
		//k_position=INT)? ('k_velocity' k_velocity=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::SafetyController}
		public Action getSafetyControllerAction_0() { return cSafetyControllerAction_0; }
		
		//('SoftLowerLimit' SoftLowerLimit=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'SoftLowerLimit'
		public Keyword getSoftLowerLimitKeyword_1_0() { return cSoftLowerLimitKeyword_1_0; }
		
		//SoftLowerLimit=INT
		public Assignment getSoftLowerLimitAssignment_1_1() { return cSoftLowerLimitAssignment_1_1; }
		
		//INT
		public RuleCall getSoftLowerLimitINTTerminalRuleCall_1_1_0() { return cSoftLowerLimitINTTerminalRuleCall_1_1_0; }
		
		//('SoftUpperLimit' SoftUpperLimit=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'SoftUpperLimit'
		public Keyword getSoftUpperLimitKeyword_2_0() { return cSoftUpperLimitKeyword_2_0; }
		
		//SoftUpperLimit=INT
		public Assignment getSoftUpperLimitAssignment_2_1() { return cSoftUpperLimitAssignment_2_1; }
		
		//INT
		public RuleCall getSoftUpperLimitINTTerminalRuleCall_2_1_0() { return cSoftUpperLimitINTTerminalRuleCall_2_1_0; }
		
		//('k_position' k_position=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'k_position'
		public Keyword getK_positionKeyword_3_0() { return cK_positionKeyword_3_0; }
		
		//k_position=INT
		public Assignment getK_positionAssignment_3_1() { return cK_positionAssignment_3_1; }
		
		//INT
		public RuleCall getK_positionINTTerminalRuleCall_3_1_0() { return cK_positionINTTerminalRuleCall_3_1_0; }
		
		//('k_velocity' k_velocity=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'k_velocity'
		public Keyword getK_velocityKeyword_4_0() { return cK_velocityKeyword_4_0; }
		
		//k_velocity=INT
		public Assignment getK_velocityAssignment_4_1() { return cK_velocityAssignment_4_1; }
		
		//INT
		public RuleCall getK_velocityINTTerminalRuleCall_4_1_0() { return cK_velocityINTTerminalRuleCall_4_1_0; }
	}
	public class NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.NL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cControl000aKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cControl000dKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NL:
		//	('\n' | '\r')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('\n' | '\r')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'\n'
		public Keyword getControl000aKeyword_0() { return cControl000aKeyword_0; }
		
		//'\r'
		public Keyword getControl000dKeyword_1() { return cControl000dKeyword_1; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRevoluteRevoluteKeyword_0_0 = (Keyword)cRevoluteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContinousEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContinousContinousKeyword_1_0 = (Keyword)cContinousEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFixedFixedKeyword_2_0 = (Keyword)cFixedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrismaticPrismaticKeyword_3_0 = (Keyword)cPrismaticEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType returns uRDF::JointType:
		//	Revolute | Continous | Fixed | Prismatic;
		public EnumRule getRule() { return rule; }
		
		//Revolute | Continous | Fixed | Prismatic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Revolute
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_0() { return cRevoluteEnumLiteralDeclaration_0; }
		
		//'Revolute'
		public Keyword getRevoluteRevoluteKeyword_0_0() { return cRevoluteRevoluteKeyword_0_0; }
		
		//Continous
		public EnumLiteralDeclaration getContinousEnumLiteralDeclaration_1() { return cContinousEnumLiteralDeclaration_1; }
		
		//'Continous'
		public Keyword getContinousContinousKeyword_1_0() { return cContinousContinousKeyword_1_0; }
		
		//Fixed
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_2() { return cFixedEnumLiteralDeclaration_2; }
		
		//'Fixed'
		public Keyword getFixedFixedKeyword_2_0() { return cFixedFixedKeyword_2_0; }
		
		//Prismatic
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_3() { return cPrismaticEnumLiteralDeclaration_3; }
		
		//'Prismatic'
		public Keyword getPrismaticPrismaticKeyword_3_0() { return cPrismaticPrismaticKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final MaterialElements pMaterial;
	private final GeometryElements pGeometry;
	private final LinkElements pLink;
	private final JointElements pJoint;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final Material_ImplElements pMaterial_Impl;
	private final Geometry_ImplElements pGeometry_Impl;
	private final ColorElements pColor;
	private final TextureElements pTexture;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final JointTypeElements eJointType;
	private final LimitElements pLimit;
	private final AxisElements pAxis;
	private final CallibrationElements pCallibration;
	private final DynamicsElements pDynamics;
	private final MimicElements pMimic;
	private final SafetyControllerElements pSafetyController;
	private final NLElements pNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMaterial = new MaterialElements();
		this.pGeometry = new GeometryElements();
		this.pLink = new LinkElements();
		this.pJoint = new JointElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pMaterial_Impl = new Material_ImplElements();
		this.pGeometry_Impl = new Geometry_ImplElements();
		this.pColor = new ColorElements();
		this.pTexture = new TextureElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.eJointType = new JointTypeElements();
		this.pLimit = new LimitElements();
		this.pAxis = new AxisElements();
		this.pCallibration = new CallibrationElements();
		this.pDynamics = new DynamicsElements();
		this.pMimic = new MimicElements();
		this.pSafetyController = new SafetyControllerElements();
		this.pNL = new NLElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.urdf.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Todo: 
	// * Expressions
	// * Defaults
	// * ReUse
	// * Constants
	// * / Robot uRDF::Robot:
	//	'RobotName' name=STRING
	//	link+=Link ("," link+=Link)* (joint+=Joint joint+=Joint*)?
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Material uRDF::Material:
	//	Material_Impl | Color | Texture
	public MaterialElements getMaterialAccess() {
		return pMaterial;
	}
	
	public ParserRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//Geometry uRDF::Geometry:
	//	Geometry_Impl | Box | Cylinder | Mesh | Sphere
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Link uRDF::Link:
	//	{uRDF::Link}
	//	'Link' name=ID ('inertial' inertial+=Inertial inertial+=Inertial*)? ('visuals' visuals+=Visual visuals+=Visual*)?
	//	('collision' collision+=Collision collision+=Collision*)?
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Joint uRDF::Joint:
	//	'Joint' name=ID ('Type' Type=JointType)?
	//	'ChildOf' '(' ChildOf+=[uRDF::Link|STRING] ChildOf+=[uRDF::Link|STRING]* ')'
	//	'ParentOf' ParentOf=[uRDF::Link|STRING] ('limit' limit=Limit)? ('axis' axis=Axis)?
	//	'origin' origin=Origin ('callibration' callibration=Callibration)? ('dynamics' dynamics=Dynamics)? ('mimic'
	//	mimic=Mimic)? ('safetycontroller' safetycontroller=SafetyController)?
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Inertial uRDF::Inertial:
	//	'origin' origin=Origin ('mass' mass+=Mass ("," mass+=Mass)*)? ('inertia' inertia+=Inertia inertia+=Inertia*)?
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual uRDF::Visual:
	//	('material' material=Material)?
	//	'origin' origin=Origin
	//	'geometry' geometry=Geometry
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision uRDF::Collision:
	//	'geometry' geometry=Geometry
	//	'origin' origin=Origin
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Origin uRDF::Origin:
	//	{uRDF::Origin} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)? ('Roll' Roll=INT)? ('Pitch' Pitch=INT)? ('Yaw' Yaw=INT)?
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass uRDF::Mass:
	//	{uRDF::Mass}
	//	'Mass'
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia uRDF::Inertia:
	//	{uRDF::Inertia}
	//	'Inertia'
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Material_Impl uRDF::Material:
	//	{uRDF::Material}
	//	'Material'
	public Material_ImplElements getMaterial_ImplAccess() {
		return pMaterial_Impl;
	}
	
	public ParserRule getMaterial_ImplRule() {
		return getMaterial_ImplAccess().getRule();
	}
	
	//Geometry_Impl uRDF::Geometry:
	//	{uRDF::Geometry}
	//	'Geometry'
	public Geometry_ImplElements getGeometry_ImplAccess() {
		return pGeometry_Impl;
	}
	
	public ParserRule getGeometry_ImplRule() {
		return getGeometry_ImplAccess().getRule();
	}
	
	//Color uRDF::Color:
	//	{uRDF::Color}
	//	'Color'
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Texture uRDF::Texture:
	//	{uRDF::Texture}
	//	'Texture'
	public TextureElements getTextureAccess() {
		return pTexture;
	}
	
	public ParserRule getTextureRule() {
		return getTextureAccess().getRule();
	}
	
	//Box uRDF::Box:
	//	{uRDF::Box}
	//	'Box'
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder uRDF::Cylinder:
	//	{uRDF::Cylinder}
	//	'Cylinder'
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Mesh uRDF::Mesh:
	//	{uRDF::Mesh}
	//	'Mesh'
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere uRDF::Sphere:
	//	{uRDF::Sphere}
	//	'Sphere'
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//enum JointType returns uRDF::JointType:
	//	Revolute | Continous | Fixed | Prismatic;
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//Limit uRDF::Limit:
	//	{uRDF::Limit} ('Lower' Lower=INT)? ('Upper' Upper=INT)? ('Effort' Effort=INT)? ('Velocity' Velocity=INT)?
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Axis uRDF::Axis:
	//	{uRDF::Axis} ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//Callibration uRDF::Callibration:
	//	{uRDF::Callibration} ('Rising' Rising=STRING)? ('Falling' Falling=STRING)?
	public CallibrationElements getCallibrationAccess() {
		return pCallibration;
	}
	
	public ParserRule getCallibrationRule() {
		return getCallibrationAccess().getRule();
	}
	
	//Dynamics uRDF::Dynamics:
	//	{uRDF::Dynamics} ('Friction' Friction=INT)? ('Damping' Damping=INT)?
	public DynamicsElements getDynamicsAccess() {
		return pDynamics;
	}
	
	public ParserRule getDynamicsRule() {
		return getDynamicsAccess().getRule();
	}
	
	//Mimic uRDF::Mimic:
	//	{uRDF::Mimic} ('Joint' Joint=STRING)? ('Multiplier' Multiplier=INT)? ('OffSet' OffSet=INT)?
	public MimicElements getMimicAccess() {
		return pMimic;
	}
	
	public ParserRule getMimicRule() {
		return getMimicAccess().getRule();
	}
	
	//SafetyController uRDF::SafetyController:
	//	{uRDF::SafetyController} ('SoftLowerLimit' SoftLowerLimit=INT)? ('SoftUpperLimit' SoftUpperLimit=INT)? ('k_position'
	//	k_position=INT)? ('k_velocity' k_velocity=INT)?
	public SafetyControllerElements getSafetyControllerAccess() {
		return pSafetyController;
	}
	
	public ParserRule getSafetyControllerRule() {
		return getSafetyControllerAccess().getRule();
	}
	
	//NL:
	//	('\n' | '\r')+;
	public NLElements getNLAccess() {
		return pNL;
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
