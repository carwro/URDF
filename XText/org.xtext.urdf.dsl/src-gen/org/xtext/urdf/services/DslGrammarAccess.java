/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLinkAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkLinkParserRuleCall_2_0 = (RuleCall)cLinkAssignment_2.eContents().get(0);
		private final Assignment cJointAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJointJointParserRuleCall_3_0 = (RuleCall)cJointAssignment_3.eContents().get(0);
		
		/// *
		// * Todo: 
		// * Expressions
		// * Defaults
		// * ReUse
		// * Constants
		// * / Robot uRDF::Robot:
		//	'RobotName' name=ID
		//	link+=Link+
		//	joint+=Joint*
		@Override public ParserRule getRule() { return rule; }
		
		//'RobotName' name=ID link+=Link+ joint+=Joint*
		public Group getGroup() { return cGroup; }
		
		//'RobotName'
		public Keyword getRobotNameKeyword_0() { return cRobotNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//link+=Link+
		public Assignment getLinkAssignment_2() { return cLinkAssignment_2; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_2_0() { return cLinkLinkParserRuleCall_2_0; }
		
		//joint+=Joint*
		public Assignment getJointAssignment_3() { return cJointAssignment_3; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_3_0() { return cJointJointParserRuleCall_3_0; }
	}
	public class MaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Material uRDF::Material:
		//	Color | Texture
		@Override public ParserRule getRule() { return rule; }
		
		//Color | Texture
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Color
		public RuleCall getColorParserRuleCall_0() { return cColorParserRuleCall_0; }
		
		//Texture
		public RuleCall getTextureParserRuleCall_1() { return cTextureParserRuleCall_1; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCylinderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeshParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSphereParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Geometry uRDF::Geometry:
		//	Box | Cylinder | Mesh | Sphere
		@Override public ParserRule getRule() { return rule; }
		
		//Box | Cylinder | Mesh | Sphere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Box
		public RuleCall getBoxParserRuleCall_0() { return cBoxParserRuleCall_0; }
		
		//Cylinder
		public RuleCall getCylinderParserRuleCall_1() { return cCylinderParserRuleCall_1; }
		
		//Mesh
		public RuleCall getMeshParserRuleCall_2() { return cMeshParserRuleCall_2; }
		
		//Sphere
		public RuleCall getSphereParserRuleCall_3() { return cSphereParserRuleCall_3; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLinkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cInertialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInertialInertialParserRuleCall_3_0 = (RuleCall)cInertialAssignment_3.eContents().get(0);
		private final Assignment cVisualsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVisualsVisualParserRuleCall_4_0 = (RuleCall)cVisualsAssignment_4.eContents().get(0);
		private final Assignment cCollisionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCollisionCollisionParserRuleCall_5_0 = (RuleCall)cCollisionAssignment_5.eContents().get(0);
		
		//Link uRDF::Link:
		//	{uRDF::Link}
		//	'Link' name=ID
		//	inertial+=Inertial*
		//	visuals+=Visual*
		//	collision+=Collision*
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Link} 'Link' name=ID inertial+=Inertial* visuals+=Visual* collision+=Collision*
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Link}
		public Action getLinkAction_0() { return cLinkAction_0; }
		
		//'Link'
		public Keyword getLinkKeyword_1() { return cLinkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//inertial+=Inertial*
		public Assignment getInertialAssignment_3() { return cInertialAssignment_3; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_0() { return cInertialInertialParserRuleCall_3_0; }
		
		//visuals+=Visual*
		public Assignment getVisualsAssignment_4() { return cVisualsAssignment_4; }
		
		//Visual
		public RuleCall getVisualsVisualParserRuleCall_4_0() { return cVisualsVisualParserRuleCall_4_0; }
		
		//collision+=Collision*
		public Assignment getCollisionAssignment_5() { return cCollisionAssignment_5; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_5_0() { return cCollisionCollisionParserRuleCall_5_0; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJointTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cChildOfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cChildOfLinkCrossReference_3_0 = (CrossReference)cChildOfAssignment_3.eContents().get(0);
		private final RuleCall cChildOfLinkSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cChildOfLinkCrossReference_3_0.eContents().get(1);
		private final Assignment cParentOfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParentOfLinkCrossReference_4_0 = (CrossReference)cParentOfAssignment_4.eContents().get(0);
		private final RuleCall cParentOfLinkSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cParentOfLinkCrossReference_4_0.eContents().get(1);
		private final Assignment cLimitAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLimitLimitParserRuleCall_5_0 = (RuleCall)cLimitAssignment_5.eContents().get(0);
		private final Assignment cAxisAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAxisAxisParserRuleCall_6_0 = (RuleCall)cAxisAssignment_6.eContents().get(0);
		private final Assignment cOriginAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOriginOriginParserRuleCall_7_0 = (RuleCall)cOriginAssignment_7.eContents().get(0);
		private final Assignment cCalibrationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCalibrationCalibrationParserRuleCall_8_0 = (RuleCall)cCalibrationAssignment_8.eContents().get(0);
		private final Assignment cDynamicsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDynamicsDynamicsParserRuleCall_9_0 = (RuleCall)cDynamicsAssignment_9.eContents().get(0);
		private final Assignment cMimicAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMimicMimicParserRuleCall_10_0 = (RuleCall)cMimicAssignment_10.eContents().get(0);
		private final Assignment cSafetycontrollerAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSafetycontrollerSafetyControllerParserRuleCall_11_0 = (RuleCall)cSafetycontrollerAssignment_11.eContents().get(0);
		
		//Joint uRDF::Joint:
		//	'Joint' name=ID
		//	Type=JointType
		//	ChildOf=[uRDF::Link|STRING] ParentOf=[uRDF::Link|STRING] limit=Limit?
		//	axis=Axis?
		//	origin=Origin
		//	calibration=Calibration?
		//	dynamics=Dynamics?
		//	mimic=Mimic?
		//	safetycontroller=SafetyController?
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID Type=JointType ChildOf=[uRDF::Link|STRING] ParentOf=[uRDF::Link|STRING] limit=Limit? axis=Axis?
		//origin=Origin calibration=Calibration? dynamics=Dynamics? mimic=Mimic? safetycontroller=SafetyController?
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Type=JointType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_2_0() { return cTypeJointTypeEnumRuleCall_2_0; }
		
		//ChildOf=[uRDF::Link|STRING]
		public Assignment getChildOfAssignment_3() { return cChildOfAssignment_3; }
		
		//[uRDF::Link|STRING]
		public CrossReference getChildOfLinkCrossReference_3_0() { return cChildOfLinkCrossReference_3_0; }
		
		//STRING
		public RuleCall getChildOfLinkSTRINGTerminalRuleCall_3_0_1() { return cChildOfLinkSTRINGTerminalRuleCall_3_0_1; }
		
		//ParentOf=[uRDF::Link|STRING]
		public Assignment getParentOfAssignment_4() { return cParentOfAssignment_4; }
		
		//[uRDF::Link|STRING]
		public CrossReference getParentOfLinkCrossReference_4_0() { return cParentOfLinkCrossReference_4_0; }
		
		//STRING
		public RuleCall getParentOfLinkSTRINGTerminalRuleCall_4_0_1() { return cParentOfLinkSTRINGTerminalRuleCall_4_0_1; }
		
		//limit=Limit?
		public Assignment getLimitAssignment_5() { return cLimitAssignment_5; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_5_0() { return cLimitLimitParserRuleCall_5_0; }
		
		//axis=Axis?
		public Assignment getAxisAssignment_6() { return cAxisAssignment_6; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_6_0() { return cAxisAxisParserRuleCall_6_0; }
		
		//origin=Origin
		public Assignment getOriginAssignment_7() { return cOriginAssignment_7; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_7_0() { return cOriginOriginParserRuleCall_7_0; }
		
		//calibration=Calibration?
		public Assignment getCalibrationAssignment_8() { return cCalibrationAssignment_8; }
		
		//Calibration
		public RuleCall getCalibrationCalibrationParserRuleCall_8_0() { return cCalibrationCalibrationParserRuleCall_8_0; }
		
		//dynamics=Dynamics?
		public Assignment getDynamicsAssignment_9() { return cDynamicsAssignment_9; }
		
		//Dynamics
		public RuleCall getDynamicsDynamicsParserRuleCall_9_0() { return cDynamicsDynamicsParserRuleCall_9_0; }
		
		//mimic=Mimic?
		public Assignment getMimicAssignment_10() { return cMimicAssignment_10; }
		
		//Mimic
		public RuleCall getMimicMimicParserRuleCall_10_0() { return cMimicMimicParserRuleCall_10_0; }
		
		//safetycontroller=SafetyController?
		public Assignment getSafetycontrollerAssignment_11() { return cSafetycontrollerAssignment_11; }
		
		//SafetyController
		public RuleCall getSafetycontrollerSafetyControllerParserRuleCall_11_0() { return cSafetycontrollerSafetyControllerParserRuleCall_11_0; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOriginAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOriginOriginParserRuleCall_0_0 = (RuleCall)cOriginAssignment_0.eContents().get(0);
		private final Assignment cMassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_1_0 = (RuleCall)cMassAssignment_1.eContents().get(0);
		private final Assignment cInertiaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInertiaInertiaParserRuleCall_2_0 = (RuleCall)cInertiaAssignment_2.eContents().get(0);
		
		//Inertial uRDF::Inertial:
		//	origin=Origin
		//	mass=Mass
		//	inertia=Inertia
		@Override public ParserRule getRule() { return rule; }
		
		//origin=Origin mass=Mass inertia=Inertia
		public Group getGroup() { return cGroup; }
		
		//origin=Origin
		public Assignment getOriginAssignment_0() { return cOriginAssignment_0; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_0_0() { return cOriginOriginParserRuleCall_0_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_1() { return cMassAssignment_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_1_0() { return cMassMassParserRuleCall_1_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_2() { return cInertiaAssignment_2; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_2_0() { return cInertiaInertiaParserRuleCall_2_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMaterialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMaterialMaterialParserRuleCall_0_0 = (RuleCall)cMaterialAssignment_0.eContents().get(0);
		private final Assignment cOriginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOriginOriginParserRuleCall_1_0 = (RuleCall)cOriginAssignment_1.eContents().get(0);
		private final Assignment cGeometryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGeometryGeometryParserRuleCall_2_0 = (RuleCall)cGeometryAssignment_2.eContents().get(0);
		
		//Visual uRDF::Visual:
		//	material=Material?
		//	origin=Origin
		//	geometry=Geometry
		@Override public ParserRule getRule() { return rule; }
		
		//material=Material? origin=Origin geometry=Geometry
		public Group getGroup() { return cGroup; }
		
		//material=Material?
		public Assignment getMaterialAssignment_0() { return cMaterialAssignment_0; }
		
		//Material
		public RuleCall getMaterialMaterialParserRuleCall_0_0() { return cMaterialMaterialParserRuleCall_0_0; }
		
		//origin=Origin
		public Assignment getOriginAssignment_1() { return cOriginAssignment_1; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_1_0() { return cOriginOriginParserRuleCall_1_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_2() { return cGeometryAssignment_2; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_2_0() { return cGeometryGeometryParserRuleCall_2_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGeometryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGeometryGeometryParserRuleCall_0_0 = (RuleCall)cGeometryAssignment_0.eContents().get(0);
		private final Assignment cOriginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOriginOriginParserRuleCall_1_0 = (RuleCall)cOriginAssignment_1.eContents().get(0);
		
		//Collision uRDF::Collision:
		//	geometry=Geometry
		//	origin=Origin
		@Override public ParserRule getRule() { return rule; }
		
		//geometry=Geometry origin=Origin
		public Group getGroup() { return cGroup; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_0() { return cGeometryAssignment_0; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_0_0() { return cGeometryGeometryParserRuleCall_0_0; }
		
		//origin=Origin
		public Assignment getOriginAssignment_1() { return cOriginAssignment_1; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_1_0() { return cOriginOriginParserRuleCall_1_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOriginAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOriginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXFLOATParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYFLOATParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Assignment cZAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZFLOATParserRuleCall_4_0 = (RuleCall)cZAssignment_4.eContents().get(0);
		private final Assignment cRollAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRollFLOATParserRuleCall_5_0 = (RuleCall)cRollAssignment_5.eContents().get(0);
		private final Assignment cPitchAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPitchFLOATParserRuleCall_6_0 = (RuleCall)cPitchAssignment_6.eContents().get(0);
		private final Assignment cYawAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYawFLOATParserRuleCall_7_0 = (RuleCall)cYawAssignment_7.eContents().get(0);
		
		//Origin uRDF::Origin:
		//	{uRDF::Origin}
		//	'Origin'
		//	x=FLOAT?
		//	y=FLOAT?
		//	z=FLOAT?
		//	roll=FLOAT?
		//	pitch=FLOAT?
		//	yaw=FLOAT?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Origin} 'Origin' x=FLOAT? y=FLOAT? z=FLOAT? roll=FLOAT? pitch=FLOAT? yaw=FLOAT?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Origin}
		public Action getOriginAction_0() { return cOriginAction_0; }
		
		//'Origin'
		public Keyword getOriginKeyword_1() { return cOriginKeyword_1; }
		
		//x=FLOAT?
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//FLOAT
		public RuleCall getXFLOATParserRuleCall_2_0() { return cXFLOATParserRuleCall_2_0; }
		
		//y=FLOAT?
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//FLOAT
		public RuleCall getYFLOATParserRuleCall_3_0() { return cYFLOATParserRuleCall_3_0; }
		
		//z=FLOAT?
		public Assignment getZAssignment_4() { return cZAssignment_4; }
		
		//FLOAT
		public RuleCall getZFLOATParserRuleCall_4_0() { return cZFLOATParserRuleCall_4_0; }
		
		//roll=FLOAT?
		public Assignment getRollAssignment_5() { return cRollAssignment_5; }
		
		//FLOAT
		public RuleCall getRollFLOATParserRuleCall_5_0() { return cRollFLOATParserRuleCall_5_0; }
		
		//pitch=FLOAT?
		public Assignment getPitchAssignment_6() { return cPitchAssignment_6; }
		
		//FLOAT
		public RuleCall getPitchFLOATParserRuleCall_6_0() { return cPitchFLOATParserRuleCall_6_0; }
		
		//yaw=FLOAT?
		public Assignment getYawAssignment_7() { return cYawAssignment_7; }
		
		//FLOAT
		public RuleCall getYawFLOATParserRuleCall_7_0() { return cYawFLOATParserRuleCall_7_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mass uRDF::Mass:
		//	{uRDF::Mass}
		//	'Mass'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mass} 'Mass'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Inertia uRDF::Inertia:
		//	{uRDF::Inertia}
		//	'Inertia'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Inertia} 'Inertia'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Color uRDF::Color:
		//	{uRDF::Color}
		//	'Color'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Color} 'Color'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Color}
		public Action getColorAction_0() { return cColorAction_0; }
		
		//'Color'
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }
	}
	public class TextureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Texture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Texture uRDF::Texture:
		//	{uRDF::Texture}
		//	'Texture'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Texture} 'Texture'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Texture}
		public Action getTextureAction_0() { return cTextureAction_0; }
		
		//'Texture'
		public Keyword getTextureKeyword_1() { return cTextureKeyword_1; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Box uRDF::Box:
		//	{uRDF::Box}
		//	'Box'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Box} 'Box'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Box}
		public Action getBoxAction_0() { return cBoxAction_0; }
		
		//'Box'
		public Keyword getBoxKeyword_1() { return cBoxKeyword_1; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCylinderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCylinderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Cylinder uRDF::Cylinder:
		//	{uRDF::Cylinder}
		//	'Cylinder'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Cylinder} 'Cylinder'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Cylinder}
		public Action getCylinderAction_0() { return cCylinderAction_0; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_1() { return cCylinderKeyword_1; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeshAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeshKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mesh uRDF::Mesh:
		//	{uRDF::Mesh}
		//	'Mesh'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mesh} 'Mesh'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mesh}
		public Action getMeshAction_0() { return cMeshAction_0; }
		
		//'Mesh'
		public Keyword getMeshKeyword_1() { return cMeshKeyword_1; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSphereAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSphereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sphere uRDF::Sphere:
		//	{uRDF::Sphere}
		//	'Sphere'
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Sphere} 'Sphere'
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Sphere}
		public Action getSphereAction_0() { return cSphereAction_0; }
		
		//'Sphere'
		public Keyword getSphereKeyword_1() { return cSphereKeyword_1; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLimitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerFLOATParserRuleCall_2_0 = (RuleCall)cLowerAssignment_2.eContents().get(0);
		private final Assignment cUpperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperFLOATParserRuleCall_3_0 = (RuleCall)cUpperAssignment_3.eContents().get(0);
		private final Assignment cEffortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEffortFLOATParserRuleCall_4_0 = (RuleCall)cEffortAssignment_4.eContents().get(0);
		private final Assignment cVelocityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVelocityFLOATParserRuleCall_5_0 = (RuleCall)cVelocityAssignment_5.eContents().get(0);
		
		//Limit uRDF::Limit:
		//	{uRDF::Limit}
		//	'Limit'
		//	lower=FLOAT?
		//	upper=FLOAT?
		//	effort=FLOAT?
		//	velocity=FLOAT?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Limit} 'Limit' lower=FLOAT? upper=FLOAT? effort=FLOAT? velocity=FLOAT?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Limit}
		public Action getLimitAction_0() { return cLimitAction_0; }
		
		//'Limit'
		public Keyword getLimitKeyword_1() { return cLimitKeyword_1; }
		
		//lower=FLOAT?
		public Assignment getLowerAssignment_2() { return cLowerAssignment_2; }
		
		//FLOAT
		public RuleCall getLowerFLOATParserRuleCall_2_0() { return cLowerFLOATParserRuleCall_2_0; }
		
		//upper=FLOAT?
		public Assignment getUpperAssignment_3() { return cUpperAssignment_3; }
		
		//FLOAT
		public RuleCall getUpperFLOATParserRuleCall_3_0() { return cUpperFLOATParserRuleCall_3_0; }
		
		//effort=FLOAT?
		public Assignment getEffortAssignment_4() { return cEffortAssignment_4; }
		
		//FLOAT
		public RuleCall getEffortFLOATParserRuleCall_4_0() { return cEffortFLOATParserRuleCall_4_0; }
		
		//velocity=FLOAT?
		public Assignment getVelocityAssignment_5() { return cVelocityAssignment_5; }
		
		//FLOAT
		public RuleCall getVelocityFLOATParserRuleCall_5_0() { return cVelocityFLOATParserRuleCall_5_0; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAxisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cXKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_2_1_0 = (RuleCall)cXAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cYAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cYINTTerminalRuleCall_3_1_0 = (RuleCall)cYAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cZKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cZAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cZINTTerminalRuleCall_4_1_0 = (RuleCall)cZAssignment_4_1.eContents().get(0);
		
		//Axis uRDF::Axis:
		//	{uRDF::Axis}
		//	'Axis' ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Axis} 'Axis' ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Axis}
		public Action getAxisAction_0() { return cAxisAction_0; }
		
		//'Axis'
		public Keyword getAxisKeyword_1() { return cAxisKeyword_1; }
		
		//('x' x=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'x'
		public Keyword getXKeyword_2_0() { return cXKeyword_2_0; }
		
		//x=INT
		public Assignment getXAssignment_2_1() { return cXAssignment_2_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_2_1_0() { return cXINTTerminalRuleCall_2_1_0; }
		
		//('y' y=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'y'
		public Keyword getYKeyword_3_0() { return cYKeyword_3_0; }
		
		//y=INT
		public Assignment getYAssignment_3_1() { return cYAssignment_3_1; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_1_0() { return cYINTTerminalRuleCall_3_1_0; }
		
		//('z' z=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'z'
		public Keyword getZKeyword_4_0() { return cZKeyword_4_0; }
		
		//z=INT
		public Assignment getZAssignment_4_1() { return cZAssignment_4_1; }
		
		//INT
		public RuleCall getZINTTerminalRuleCall_4_1_0() { return cZINTTerminalRuleCall_4_1_0; }
	}
	public class CalibrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Calibration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCalibrationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalibrationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRisingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRisingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRisingFLOATParserRuleCall_2_1_0 = (RuleCall)cRisingAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFallingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFallingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFallingFLOATParserRuleCall_3_1_0 = (RuleCall)cFallingAssignment_3_1.eContents().get(0);
		
		//Calibration uRDF::Calibration:
		//	{uRDF::Calibration}
		//	'Calibration' ('Rising' rising=FLOAT)? ('Falling' falling=FLOAT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Calibration} 'Calibration' ('Rising' rising=FLOAT)? ('Falling' falling=FLOAT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Calibration}
		public Action getCalibrationAction_0() { return cCalibrationAction_0; }
		
		//'Calibration'
		public Keyword getCalibrationKeyword_1() { return cCalibrationKeyword_1; }
		
		//('Rising' rising=FLOAT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Rising'
		public Keyword getRisingKeyword_2_0() { return cRisingKeyword_2_0; }
		
		//rising=FLOAT
		public Assignment getRisingAssignment_2_1() { return cRisingAssignment_2_1; }
		
		//FLOAT
		public RuleCall getRisingFLOATParserRuleCall_2_1_0() { return cRisingFLOATParserRuleCall_2_1_0; }
		
		//('Falling' falling=FLOAT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Falling'
		public Keyword getFallingKeyword_3_0() { return cFallingKeyword_3_0; }
		
		//falling=FLOAT
		public Assignment getFallingAssignment_3_1() { return cFallingAssignment_3_1; }
		
		//FLOAT
		public RuleCall getFallingFLOATParserRuleCall_3_1_0() { return cFallingFLOATParserRuleCall_3_1_0; }
	}
	public class DynamicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Dynamics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDynamicsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDynamicsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFrictionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFrictionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFrictionFLOATParserRuleCall_2_1_0 = (RuleCall)cFrictionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDampingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDampingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDampingFLOATParserRuleCall_3_1_0 = (RuleCall)cDampingAssignment_3_1.eContents().get(0);
		
		//Dynamics uRDF::Dynamics:
		//	{uRDF::Dynamics}
		//	'Dynamics' ('Friction' friction=FLOAT)? ('Damping' damping=FLOAT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Dynamics} 'Dynamics' ('Friction' friction=FLOAT)? ('Damping' damping=FLOAT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Dynamics}
		public Action getDynamicsAction_0() { return cDynamicsAction_0; }
		
		//'Dynamics'
		public Keyword getDynamicsKeyword_1() { return cDynamicsKeyword_1; }
		
		//('Friction' friction=FLOAT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Friction'
		public Keyword getFrictionKeyword_2_0() { return cFrictionKeyword_2_0; }
		
		//friction=FLOAT
		public Assignment getFrictionAssignment_2_1() { return cFrictionAssignment_2_1; }
		
		//FLOAT
		public RuleCall getFrictionFLOATParserRuleCall_2_1_0() { return cFrictionFLOATParserRuleCall_2_1_0; }
		
		//('Damping' damping=FLOAT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Damping'
		public Keyword getDampingKeyword_3_0() { return cDampingKeyword_3_0; }
		
		//damping=FLOAT
		public Assignment getDampingAssignment_3_1() { return cDampingAssignment_3_1; }
		
		//FLOAT
		public RuleCall getDampingFLOATParserRuleCall_3_1_0() { return cDampingFLOATParserRuleCall_3_1_0; }
	}
	public class MimicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mimic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMimicAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMimicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMultiplierKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplierFLOATParserRuleCall_2_1_0 = (RuleCall)cMultiplierAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOffSetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOffSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOffSetFLOATParserRuleCall_3_1_0 = (RuleCall)cOffSetAssignment_3_1.eContents().get(0);
		
		//Mimic uRDF::Mimic:
		//	{uRDF::Mimic}
		//	'Mimic' ('Multiplier' multiplier=FLOAT)? ('OffSet' offSet=FLOAT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Mimic} 'Mimic' ('Multiplier' multiplier=FLOAT)? ('OffSet' offSet=FLOAT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Mimic}
		public Action getMimicAction_0() { return cMimicAction_0; }
		
		//'Mimic'
		public Keyword getMimicKeyword_1() { return cMimicKeyword_1; }
		
		//('Multiplier' multiplier=FLOAT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Multiplier'
		public Keyword getMultiplierKeyword_2_0() { return cMultiplierKeyword_2_0; }
		
		//multiplier=FLOAT
		public Assignment getMultiplierAssignment_2_1() { return cMultiplierAssignment_2_1; }
		
		//FLOAT
		public RuleCall getMultiplierFLOATParserRuleCall_2_1_0() { return cMultiplierFLOATParserRuleCall_2_1_0; }
		
		//('OffSet' offSet=FLOAT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'OffSet'
		public Keyword getOffSetKeyword_3_0() { return cOffSetKeyword_3_0; }
		
		//offSet=FLOAT
		public Assignment getOffSetAssignment_3_1() { return cOffSetAssignment_3_1; }
		
		//FLOAT
		public RuleCall getOffSetFLOATParserRuleCall_3_1_0() { return cOffSetFLOATParserRuleCall_3_1_0; }
	}
	public class SafetyControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SafetyController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyControllerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSafetyControllerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSoftLowerLimitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSoftLowerLimitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSoftLowerLimitFLOATParserRuleCall_2_1_0 = (RuleCall)cSoftLowerLimitAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSoftUpperLimitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSoftUpperLimitAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSoftUpperLimitFLOATParserRuleCall_3_1_0 = (RuleCall)cSoftUpperLimitAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cK_positionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cK_positionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cK_positionFLOATParserRuleCall_4_1_0 = (RuleCall)cK_positionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cK_velocityKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cK_velocityAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cK_velocityFLOATParserRuleCall_5_1_0 = (RuleCall)cK_velocityAssignment_5_1.eContents().get(0);
		
		//SafetyController uRDF::SafetyController:
		//	{uRDF::SafetyController}
		//	'SafetyController' ('SoftLowerLimit' softLowerLimit=FLOAT)? ('SoftUpperLimit' softUpperLimit=FLOAT)? ('k_position'
		//	k_position=FLOAT)? ('k_velocity' k_velocity=FLOAT)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::SafetyController} 'SafetyController' ('SoftLowerLimit' softLowerLimit=FLOAT)? ('SoftUpperLimit'
		//softUpperLimit=FLOAT)? ('k_position' k_position=FLOAT)? ('k_velocity' k_velocity=FLOAT)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::SafetyController}
		public Action getSafetyControllerAction_0() { return cSafetyControllerAction_0; }
		
		//'SafetyController'
		public Keyword getSafetyControllerKeyword_1() { return cSafetyControllerKeyword_1; }
		
		//('SoftLowerLimit' softLowerLimit=FLOAT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'SoftLowerLimit'
		public Keyword getSoftLowerLimitKeyword_2_0() { return cSoftLowerLimitKeyword_2_0; }
		
		//softLowerLimit=FLOAT
		public Assignment getSoftLowerLimitAssignment_2_1() { return cSoftLowerLimitAssignment_2_1; }
		
		//FLOAT
		public RuleCall getSoftLowerLimitFLOATParserRuleCall_2_1_0() { return cSoftLowerLimitFLOATParserRuleCall_2_1_0; }
		
		//('SoftUpperLimit' softUpperLimit=FLOAT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'SoftUpperLimit'
		public Keyword getSoftUpperLimitKeyword_3_0() { return cSoftUpperLimitKeyword_3_0; }
		
		//softUpperLimit=FLOAT
		public Assignment getSoftUpperLimitAssignment_3_1() { return cSoftUpperLimitAssignment_3_1; }
		
		//FLOAT
		public RuleCall getSoftUpperLimitFLOATParserRuleCall_3_1_0() { return cSoftUpperLimitFLOATParserRuleCall_3_1_0; }
		
		//('k_position' k_position=FLOAT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'k_position'
		public Keyword getK_positionKeyword_4_0() { return cK_positionKeyword_4_0; }
		
		//k_position=FLOAT
		public Assignment getK_positionAssignment_4_1() { return cK_positionAssignment_4_1; }
		
		//FLOAT
		public RuleCall getK_positionFLOATParserRuleCall_4_1_0() { return cK_positionFLOATParserRuleCall_4_1_0; }
		
		//('k_velocity' k_velocity=FLOAT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'k_velocity'
		public Keyword getK_velocityKeyword_5_0() { return cK_velocityKeyword_5_0; }
		
		//k_velocity=FLOAT
		public Assignment getK_velocityAssignment_5_1() { return cK_velocityAssignment_5_1; }
		
		//FLOAT
		public RuleCall getK_velocityFLOATParserRuleCall_5_1_0() { return cK_velocityFLOATParserRuleCall_5_1_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT ecore::EFloat:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.NL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cControl000aKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cControl000dKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NL:
		//	('\n' | '\r')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('\n' | '\r')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'\n'
		public Keyword getControl000aKeyword_0() { return cControl000aKeyword_0; }
		
		//'\r'
		public Keyword getControl000dKeyword_1() { return cControl000dKeyword_1; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRevoluteRevoluteKeyword_0_0 = (Keyword)cRevoluteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContinousEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContinousContinousKeyword_1_0 = (Keyword)cContinousEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFixedFixedKeyword_2_0 = (Keyword)cFixedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrismaticPrismaticKeyword_3_0 = (Keyword)cPrismaticEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType returns uRDF::JointType:
		//	revolute='Revolute' | continous='Continous' | fixed='Fixed' | prismatic='Prismatic';
		public EnumRule getRule() { return rule; }
		
		//revolute='Revolute' | continous='Continous' | fixed='Fixed' | prismatic='Prismatic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//revolute='Revolute'
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_0() { return cRevoluteEnumLiteralDeclaration_0; }
		
		//'Revolute'
		public Keyword getRevoluteRevoluteKeyword_0_0() { return cRevoluteRevoluteKeyword_0_0; }
		
		//continous='Continous'
		public EnumLiteralDeclaration getContinousEnumLiteralDeclaration_1() { return cContinousEnumLiteralDeclaration_1; }
		
		//'Continous'
		public Keyword getContinousContinousKeyword_1_0() { return cContinousContinousKeyword_1_0; }
		
		//fixed='Fixed'
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_2() { return cFixedEnumLiteralDeclaration_2; }
		
		//'Fixed'
		public Keyword getFixedFixedKeyword_2_0() { return cFixedFixedKeyword_2_0; }
		
		//prismatic='Prismatic'
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_3() { return cPrismaticEnumLiteralDeclaration_3; }
		
		//'Prismatic'
		public Keyword getPrismaticPrismaticKeyword_3_0() { return cPrismaticPrismaticKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final MaterialElements pMaterial;
	private final GeometryElements pGeometry;
	private final LinkElements pLink;
	private final JointElements pJoint;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final ColorElements pColor;
	private final TextureElements pTexture;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final JointTypeElements eJointType;
	private final LimitElements pLimit;
	private final AxisElements pAxis;
	private final CalibrationElements pCalibration;
	private final DynamicsElements pDynamics;
	private final MimicElements pMimic;
	private final SafetyControllerElements pSafetyController;
	private final FLOATElements pFLOAT;
	private final NLElements pNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMaterial = new MaterialElements();
		this.pGeometry = new GeometryElements();
		this.pLink = new LinkElements();
		this.pJoint = new JointElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pColor = new ColorElements();
		this.pTexture = new TextureElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.eJointType = new JointTypeElements();
		this.pLimit = new LimitElements();
		this.pAxis = new AxisElements();
		this.pCalibration = new CalibrationElements();
		this.pDynamics = new DynamicsElements();
		this.pMimic = new MimicElements();
		this.pSafetyController = new SafetyControllerElements();
		this.pFLOAT = new FLOATElements();
		this.pNL = new NLElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.urdf.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Todo: 
	// * Expressions
	// * Defaults
	// * ReUse
	// * Constants
	// * / Robot uRDF::Robot:
	//	'RobotName' name=ID
	//	link+=Link+
	//	joint+=Joint*
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Material uRDF::Material:
	//	Color | Texture
	public MaterialElements getMaterialAccess() {
		return pMaterial;
	}
	
	public ParserRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//Geometry uRDF::Geometry:
	//	Box | Cylinder | Mesh | Sphere
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Link uRDF::Link:
	//	{uRDF::Link}
	//	'Link' name=ID
	//	inertial+=Inertial*
	//	visuals+=Visual*
	//	collision+=Collision*
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Joint uRDF::Joint:
	//	'Joint' name=ID
	//	Type=JointType
	//	ChildOf=[uRDF::Link|STRING] ParentOf=[uRDF::Link|STRING] limit=Limit?
	//	axis=Axis?
	//	origin=Origin
	//	calibration=Calibration?
	//	dynamics=Dynamics?
	//	mimic=Mimic?
	//	safetycontroller=SafetyController?
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Inertial uRDF::Inertial:
	//	origin=Origin
	//	mass=Mass
	//	inertia=Inertia
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual uRDF::Visual:
	//	material=Material?
	//	origin=Origin
	//	geometry=Geometry
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision uRDF::Collision:
	//	geometry=Geometry
	//	origin=Origin
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Origin uRDF::Origin:
	//	{uRDF::Origin}
	//	'Origin'
	//	x=FLOAT?
	//	y=FLOAT?
	//	z=FLOAT?
	//	roll=FLOAT?
	//	pitch=FLOAT?
	//	yaw=FLOAT?
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass uRDF::Mass:
	//	{uRDF::Mass}
	//	'Mass'
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia uRDF::Inertia:
	//	{uRDF::Inertia}
	//	'Inertia'
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Color uRDF::Color:
	//	{uRDF::Color}
	//	'Color'
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Texture uRDF::Texture:
	//	{uRDF::Texture}
	//	'Texture'
	public TextureElements getTextureAccess() {
		return pTexture;
	}
	
	public ParserRule getTextureRule() {
		return getTextureAccess().getRule();
	}
	
	//Box uRDF::Box:
	//	{uRDF::Box}
	//	'Box'
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder uRDF::Cylinder:
	//	{uRDF::Cylinder}
	//	'Cylinder'
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Mesh uRDF::Mesh:
	//	{uRDF::Mesh}
	//	'Mesh'
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere uRDF::Sphere:
	//	{uRDF::Sphere}
	//	'Sphere'
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//enum JointType returns uRDF::JointType:
	//	revolute='Revolute' | continous='Continous' | fixed='Fixed' | prismatic='Prismatic';
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//Limit uRDF::Limit:
	//	{uRDF::Limit}
	//	'Limit'
	//	lower=FLOAT?
	//	upper=FLOAT?
	//	effort=FLOAT?
	//	velocity=FLOAT?
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Axis uRDF::Axis:
	//	{uRDF::Axis}
	//	'Axis' ('x' x=INT)? ('y' y=INT)? ('z' z=INT)?
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//Calibration uRDF::Calibration:
	//	{uRDF::Calibration}
	//	'Calibration' ('Rising' rising=FLOAT)? ('Falling' falling=FLOAT)?
	public CalibrationElements getCalibrationAccess() {
		return pCalibration;
	}
	
	public ParserRule getCalibrationRule() {
		return getCalibrationAccess().getRule();
	}
	
	//Dynamics uRDF::Dynamics:
	//	{uRDF::Dynamics}
	//	'Dynamics' ('Friction' friction=FLOAT)? ('Damping' damping=FLOAT)?
	public DynamicsElements getDynamicsAccess() {
		return pDynamics;
	}
	
	public ParserRule getDynamicsRule() {
		return getDynamicsAccess().getRule();
	}
	
	//Mimic uRDF::Mimic:
	//	{uRDF::Mimic}
	//	'Mimic' ('Multiplier' multiplier=FLOAT)? ('OffSet' offSet=FLOAT)?
	public MimicElements getMimicAccess() {
		return pMimic;
	}
	
	public ParserRule getMimicRule() {
		return getMimicAccess().getRule();
	}
	
	//SafetyController uRDF::SafetyController:
	//	{uRDF::SafetyController}
	//	'SafetyController' ('SoftLowerLimit' softLowerLimit=FLOAT)? ('SoftUpperLimit' softUpperLimit=FLOAT)? ('k_position'
	//	k_position=FLOAT)? ('k_velocity' k_velocity=FLOAT)?
	public SafetyControllerElements getSafetyControllerAccess() {
		return pSafetyController;
	}
	
	public ParserRule getSafetyControllerRule() {
		return getSafetyControllerAccess().getRule();
	}
	
	//FLOAT ecore::EFloat:
	//	INT '.' INT
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//NL:
	//	('\n' | '\r')+;
	public NLElements getNLAccess() {
		return pNL;
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
