/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cLinkAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_2_0_0 = (RuleCall)cLinkAssignment_2_0.eContents().get(0);
		private final Assignment cJointAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_2_1_0 = (RuleCall)cJointAssignment_2_1.eContents().get(0);
		
		/// *
		// * Todo: 
		// * Expressions - inline for value assignment 
		// * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
		// * Topology of Link and Joint: How to specify?
		// * Add reflect as alternative in relevant places...
		// * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
		// * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
		// * Create ValueConverter to convert scale values to Box
		// * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
		// * DONE: Change interface to abstract class in metamodel
		// * DONE: ReUse - add reference in the metamodel
		// * DONE: Origin required should possibly be adjusted in metamodel?
		// * DONE: Scientific notation - how to implement?
		// * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
		// * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
		// * /
		//Robot uRDF::Robot:
		//	'Robot' name=ID (link+=Link | joint+=Joint)*
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID (link+=Link | joint+=Joint)*
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(link+=Link | joint+=Joint)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//link+=Link
		public Assignment getLinkAssignment_2_0() { return cLinkAssignment_2_0; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_2_0_0() { return cLinkLinkParserRuleCall_2_0_0; }
		
		//joint+=Joint
		public Assignment getJointAssignment_2_1() { return cJointAssignment_2_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_2_1_0() { return cJointJointParserRuleCall_2_1_0; }
	}
	public class MaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Material uRDF::Material:
		//	Color | Texture
		@Override public ParserRule getRule() { return rule; }
		
		//Color | Texture
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Color
		public RuleCall getColorParserRuleCall_0() { return cColorParserRuleCall_0; }
		
		//Texture
		public RuleCall getTextureParserRuleCall_1() { return cTextureParserRuleCall_1; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCylinderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeshParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSphereParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Geometry uRDF::Geometry:
		//	Box | Cylinder | Mesh | Sphere
		@Override public ParserRule getRule() { return rule; }
		
		//Box | Cylinder | Mesh | Sphere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Box
		public RuleCall getBoxParserRuleCall_0() { return cBoxParserRuleCall_0; }
		
		//Cylinder
		public RuleCall getCylinderParserRuleCall_1() { return cCylinderParserRuleCall_1; }
		
		//Mesh
		public RuleCall getMeshParserRuleCall_2() { return cMeshParserRuleCall_2; }
		
		//Sphere
		public RuleCall getSphereParserRuleCall_3() { return cSphereParserRuleCall_3; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVisualsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisualsVisualParserRuleCall_2_0 = (RuleCall)cVisualsAssignment_2.eContents().get(0);
		private final Assignment cInertialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInertialInertialParserRuleCall_3_0 = (RuleCall)cInertialAssignment_3.eContents().get(0);
		private final Assignment cCollisionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollisionCollisionParserRuleCall_4_0 = (RuleCall)cCollisionAssignment_4.eContents().get(0);
		
		//Link uRDF::Link:
		//	'Link' name=ID //alle visuals skal defineres in order - ok?
		// visuals+=Visual* inertial+=Inertial*
		//	collision+=Collision*
		@Override public ParserRule getRule() { return rule; }
		
		//'Link' name=ID //alle visuals skal defineres in order - ok?
		// visuals+=Visual* inertial+=Inertial* collision+=Collision*
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////alle visuals skal defineres in order - ok?
		// visuals+=Visual*
		public Assignment getVisualsAssignment_2() { return cVisualsAssignment_2; }
		
		//Visual
		public RuleCall getVisualsVisualParserRuleCall_2_0() { return cVisualsVisualParserRuleCall_2_0; }
		
		//inertial+=Inertial*
		public Assignment getInertialAssignment_3() { return cInertialAssignment_3; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_3_0() { return cInertialInertialParserRuleCall_3_0; }
		
		//collision+=Collision*
		public Assignment getCollisionAssignment_4() { return cCollisionAssignment_4; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_4_0() { return cCollisionCollisionParserRuleCall_4_0; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJointTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cChildOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildOfAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cChildOfLinkCrossReference_5_0 = (CrossReference)cChildOfAssignment_5.eContents().get(0);
		private final RuleCall cChildOfLinkIDTerminalRuleCall_5_0_1 = (RuleCall)cChildOfLinkCrossReference_5_0.eContents().get(1);
		private final Keyword cParentOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentOfAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cParentOfLinkCrossReference_7_0 = (CrossReference)cParentOfAssignment_7.eContents().get(0);
		private final RuleCall cParentOfLinkIDTerminalRuleCall_7_0_1 = (RuleCall)cParentOfLinkCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLimitKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLimitAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_8_1_0 = (RuleCall)cLimitAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cAxisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cAxisAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_9_1_0 = (RuleCall)cAxisAssignment_9_1.eContents().get(0);
		private final Assignment cOriginAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOriginOriginParserRuleCall_10_0 = (RuleCall)cOriginAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCalibrationKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cCalibrationAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cCalibrationCalibrationParserRuleCall_11_1_0 = (RuleCall)cCalibrationAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cDynamicsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cDynamicsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cDynamicsDynamicsParserRuleCall_12_1_0 = (RuleCall)cDynamicsAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cMimicKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cMimicAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cMimicMimicParserRuleCall_13_1_0 = (RuleCall)cMimicAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cSafetyControllerKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cSafetycontrollerAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cSafetycontrollerSafetyControllerParserRuleCall_14_1_0 = (RuleCall)cSafetycontrollerAssignment_14_1.eContents().get(0);
		
		//Joint uRDF::Joint:
		//	'Joint' name=ID 'Type' Type=JointType 'ChildOf' ChildOf=[uRDF::Link] 'ParentOf' ParentOf=[uRDF::Link] ('Limit'
		//	limit=Limit)? ('Axis' axis=Axis)? origin=Origin? ('Calibration' calibration=Calibration)? ('Dynamics'
		//	dynamics=Dynamics)? ('Mimic' mimic=Mimic)? ('SafetyController' safetycontroller=SafetyController)?
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint' name=ID 'Type' Type=JointType 'ChildOf' ChildOf=[uRDF::Link] 'ParentOf' ParentOf=[uRDF::Link] ('Limit'
		//limit=Limit)? ('Axis' axis=Axis)? origin=Origin? ('Calibration' calibration=Calibration)? ('Dynamics'
		//dynamics=Dynamics)? ('Mimic' mimic=Mimic)? ('SafetyController' safetycontroller=SafetyController)?
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//Type=JointType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//JointType
		public RuleCall getTypeJointTypeEnumRuleCall_3_0() { return cTypeJointTypeEnumRuleCall_3_0; }
		
		//'ChildOf'
		public Keyword getChildOfKeyword_4() { return cChildOfKeyword_4; }
		
		//ChildOf=[uRDF::Link]
		public Assignment getChildOfAssignment_5() { return cChildOfAssignment_5; }
		
		//[uRDF::Link]
		public CrossReference getChildOfLinkCrossReference_5_0() { return cChildOfLinkCrossReference_5_0; }
		
		//ID
		public RuleCall getChildOfLinkIDTerminalRuleCall_5_0_1() { return cChildOfLinkIDTerminalRuleCall_5_0_1; }
		
		//'ParentOf'
		public Keyword getParentOfKeyword_6() { return cParentOfKeyword_6; }
		
		//ParentOf=[uRDF::Link]
		public Assignment getParentOfAssignment_7() { return cParentOfAssignment_7; }
		
		//[uRDF::Link]
		public CrossReference getParentOfLinkCrossReference_7_0() { return cParentOfLinkCrossReference_7_0; }
		
		//ID
		public RuleCall getParentOfLinkIDTerminalRuleCall_7_0_1() { return cParentOfLinkIDTerminalRuleCall_7_0_1; }
		
		//('Limit' limit=Limit)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Limit'
		public Keyword getLimitKeyword_8_0() { return cLimitKeyword_8_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_8_1() { return cLimitAssignment_8_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_8_1_0() { return cLimitLimitParserRuleCall_8_1_0; }
		
		//('Axis' axis=Axis)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'Axis'
		public Keyword getAxisKeyword_9_0() { return cAxisKeyword_9_0; }
		
		//axis=Axis
		public Assignment getAxisAssignment_9_1() { return cAxisAssignment_9_1; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_9_1_0() { return cAxisAxisParserRuleCall_9_1_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_10() { return cOriginAssignment_10; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_10_0() { return cOriginOriginParserRuleCall_10_0; }
		
		//('Calibration' calibration=Calibration)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'Calibration'
		public Keyword getCalibrationKeyword_11_0() { return cCalibrationKeyword_11_0; }
		
		//calibration=Calibration
		public Assignment getCalibrationAssignment_11_1() { return cCalibrationAssignment_11_1; }
		
		//Calibration
		public RuleCall getCalibrationCalibrationParserRuleCall_11_1_0() { return cCalibrationCalibrationParserRuleCall_11_1_0; }
		
		//('Dynamics' dynamics=Dynamics)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'Dynamics'
		public Keyword getDynamicsKeyword_12_0() { return cDynamicsKeyword_12_0; }
		
		//dynamics=Dynamics
		public Assignment getDynamicsAssignment_12_1() { return cDynamicsAssignment_12_1; }
		
		//Dynamics
		public RuleCall getDynamicsDynamicsParserRuleCall_12_1_0() { return cDynamicsDynamicsParserRuleCall_12_1_0; }
		
		//('Mimic' mimic=Mimic)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'Mimic'
		public Keyword getMimicKeyword_13_0() { return cMimicKeyword_13_0; }
		
		//mimic=Mimic
		public Assignment getMimicAssignment_13_1() { return cMimicAssignment_13_1; }
		
		//Mimic
		public RuleCall getMimicMimicParserRuleCall_13_1_0() { return cMimicMimicParserRuleCall_13_1_0; }
		
		//('SafetyController' safetycontroller=SafetyController)?
		public Group getGroup_14() { return cGroup_14; }
		
		//'SafetyController'
		public Keyword getSafetyControllerKeyword_14_0() { return cSafetyControllerKeyword_14_0; }
		
		//safetycontroller=SafetyController
		public Assignment getSafetycontrollerAssignment_14_1() { return cSafetycontrollerAssignment_14_1; }
		
		//SafetyController
		public RuleCall getSafetycontrollerSafetyControllerParserRuleCall_14_1_0() { return cSafetycontrollerSafetyControllerParserRuleCall_14_1_0; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInertialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInertiaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInertiaInertiaParserRuleCall_2_0 = (RuleCall)cInertiaAssignment_2.eContents().get(0);
		private final Assignment cMassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMassMassParserRuleCall_3_0 = (RuleCall)cMassAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		
		//Inertial uRDF::Inertial:
		//	'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
		@Override public ParserRule getRule() { return rule; }
		
		//'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Inertial'
		public Keyword getInertialKeyword_0() { return cInertialKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_2() { return cInertiaAssignment_2; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_2_0() { return cInertiaInertiaParserRuleCall_2_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_3() { return cMassAssignment_3; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_3_0() { return cMassMassParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaterialKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaterialAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaterialMaterialParserRuleCall_5_1_0 = (RuleCall)cMaterialAssignment_5_1.eContents().get(0);
		
		//Visual uRDF::Visual:
		//	'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
		@Override public ParserRule getRule() { return rule; }
		
		//'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
		public Group getGroup() { return cGroup; }
		
		//'Visual'
		public Keyword getVisualKeyword_0() { return cVisualKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
		
		//('Material' material=Material)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Material'
		public Keyword getMaterialKeyword_5_0() { return cMaterialKeyword_5_0; }
		
		//material=Material
		public Assignment getMaterialAssignment_5_1() { return cMaterialAssignment_5_1; }
		
		//Material
		public RuleCall getMaterialMaterialParserRuleCall_5_1_0() { return cMaterialMaterialParserRuleCall_5_1_0; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final Assignment cOriginAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOriginOriginParserRuleCall_4_0 = (RuleCall)cOriginAssignment_4.eContents().get(0);
		
		//Collision uRDF::Collision:
		//	'Collision' name=ID 'Geometry' geometry=Geometry origin=Origin?
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision' name=ID 'Geometry' geometry=Geometry origin=Origin?
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//origin=Origin?
		public Assignment getOriginAssignment_4() { return cOriginAssignment_4; }
		
		//Origin
		public RuleCall getOriginOriginParserRuleCall_4_0() { return cOriginOriginParserRuleCall_4_0; }
	}
	public class OriginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Origin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOriginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cXyzKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXSIGNED_NUMERICParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYSIGNED_NUMERICParserRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Assignment cZAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZSIGNED_NUMERICParserRuleCall_5_0 = (RuleCall)cZAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRoll_pitch_yawKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRollAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRollSIGNED_NUMERICParserRuleCall_6_1_0 = (RuleCall)cRollAssignment_6_1.eContents().get(0);
		private final Assignment cPitchAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPitchSIGNED_NUMERICParserRuleCall_6_2_0 = (RuleCall)cPitchAssignment_6_2.eContents().get(0);
		private final Assignment cYawAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cYawSIGNED_NUMERICParserRuleCall_6_3_0 = (RuleCall)cYawAssignment_6_3.eContents().get(0);
		
		//Origin uRDF::Origin:
		//	'Origin' name=ID? 'xyz' x=SIGNED_NUMERIC y=SIGNED_NUMERIC z=SIGNED_NUMERIC ('roll_pitch_yaw' roll=SIGNED_NUMERIC
		//	pitch=SIGNED_NUMERIC yaw=SIGNED_NUMERIC)?
		@Override public ParserRule getRule() { return rule; }
		
		//'Origin' name=ID? 'xyz' x=SIGNED_NUMERIC y=SIGNED_NUMERIC z=SIGNED_NUMERIC ('roll_pitch_yaw' roll=SIGNED_NUMERIC
		//pitch=SIGNED_NUMERIC yaw=SIGNED_NUMERIC)?
		public Group getGroup() { return cGroup; }
		
		//'Origin'
		public Keyword getOriginKeyword_0() { return cOriginKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'xyz'
		public Keyword getXyzKeyword_2() { return cXyzKeyword_2; }
		
		//x=SIGNED_NUMERIC
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//SIGNED_NUMERIC
		public RuleCall getXSIGNED_NUMERICParserRuleCall_3_0() { return cXSIGNED_NUMERICParserRuleCall_3_0; }
		
		//y=SIGNED_NUMERIC
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//SIGNED_NUMERIC
		public RuleCall getYSIGNED_NUMERICParserRuleCall_4_0() { return cYSIGNED_NUMERICParserRuleCall_4_0; }
		
		//z=SIGNED_NUMERIC
		public Assignment getZAssignment_5() { return cZAssignment_5; }
		
		//SIGNED_NUMERIC
		public RuleCall getZSIGNED_NUMERICParserRuleCall_5_0() { return cZSIGNED_NUMERICParserRuleCall_5_0; }
		
		//('roll_pitch_yaw' roll=SIGNED_NUMERIC pitch=SIGNED_NUMERIC yaw=SIGNED_NUMERIC)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'roll_pitch_yaw'
		public Keyword getRoll_pitch_yawKeyword_6_0() { return cRoll_pitch_yawKeyword_6_0; }
		
		//roll=SIGNED_NUMERIC
		public Assignment getRollAssignment_6_1() { return cRollAssignment_6_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getRollSIGNED_NUMERICParserRuleCall_6_1_0() { return cRollSIGNED_NUMERICParserRuleCall_6_1_0; }
		
		//pitch=SIGNED_NUMERIC
		public Assignment getPitchAssignment_6_2() { return cPitchAssignment_6_2; }
		
		//SIGNED_NUMERIC
		public RuleCall getPitchSIGNED_NUMERICParserRuleCall_6_2_0() { return cPitchSIGNED_NUMERICParserRuleCall_6_2_0; }
		
		//yaw=SIGNED_NUMERIC
		public Assignment getYawAssignment_6_3() { return cYawAssignment_6_3; }
		
		//SIGNED_NUMERIC
		public RuleCall getYawSIGNED_NUMERICParserRuleCall_6_3_0() { return cYawSIGNED_NUMERICParserRuleCall_6_3_0; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMassValueInKilogramsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMassValueInKilogramsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMassValueInKilogramsFLOATParserRuleCall_3_0 = (RuleCall)cMassValueInKilogramsAssignment_3.eContents().get(0);
		
		//Mass uRDF::Mass:
		//	'Mass' name=ID? 'massValueInKilograms' massValueInKilograms=FLOAT
		@Override public ParserRule getRule() { return rule; }
		
		//'Mass' name=ID? 'massValueInKilograms' massValueInKilograms=FLOAT
		public Group getGroup() { return cGroup; }
		
		//'Mass'
		public Keyword getMassKeyword_0() { return cMassKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'massValueInKilograms'
		public Keyword getMassValueInKilogramsKeyword_2() { return cMassValueInKilogramsKeyword_2; }
		
		//massValueInKilograms=FLOAT
		public Assignment getMassValueInKilogramsAssignment_3() { return cMassValueInKilogramsAssignment_3; }
		
		//FLOAT
		public RuleCall getMassValueInKilogramsFLOATParserRuleCall_3_0() { return cMassValueInKilogramsFLOATParserRuleCall_3_0; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInertiaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIxxKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIxxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIxxSIGNED_NUMERICParserRuleCall_3_0 = (RuleCall)cIxxAssignment_3.eContents().get(0);
		private final Keyword cIxyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIxyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIxySIGNED_NUMERICParserRuleCall_5_0 = (RuleCall)cIxyAssignment_5.eContents().get(0);
		private final Keyword cIxzKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIxzAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIxzSIGNED_NUMERICParserRuleCall_7_0 = (RuleCall)cIxzAssignment_7.eContents().get(0);
		private final Keyword cIyyKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cIyyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cIyySIGNED_NUMERICParserRuleCall_9_0 = (RuleCall)cIyyAssignment_9.eContents().get(0);
		private final Keyword cIyzKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cIyzAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cIyzSIGNED_NUMERICParserRuleCall_11_0 = (RuleCall)cIyzAssignment_11.eContents().get(0);
		private final Keyword cIzzKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cIzzAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cIzzSIGNED_NUMERICParserRuleCall_13_0 = (RuleCall)cIzzAssignment_13.eContents().get(0);
		
		//Inertia uRDF::Inertia:
		//	'Inertia' name=ID? 'ixx' ixx=SIGNED_NUMERIC 'ixy' ixy=SIGNED_NUMERIC 'ixz' ixz=SIGNED_NUMERIC 'iyy'
		//	iyy=SIGNED_NUMERIC 'iyz' iyz=SIGNED_NUMERIC 'izz' izz=SIGNED_NUMERIC
		@Override public ParserRule getRule() { return rule; }
		
		//'Inertia' name=ID? 'ixx' ixx=SIGNED_NUMERIC 'ixy' ixy=SIGNED_NUMERIC 'ixz' ixz=SIGNED_NUMERIC 'iyy' iyy=SIGNED_NUMERIC
		//'iyz' iyz=SIGNED_NUMERIC 'izz' izz=SIGNED_NUMERIC
		public Group getGroup() { return cGroup; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_0() { return cInertiaKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ixx'
		public Keyword getIxxKeyword_2() { return cIxxKeyword_2; }
		
		//ixx=SIGNED_NUMERIC
		public Assignment getIxxAssignment_3() { return cIxxAssignment_3; }
		
		//SIGNED_NUMERIC
		public RuleCall getIxxSIGNED_NUMERICParserRuleCall_3_0() { return cIxxSIGNED_NUMERICParserRuleCall_3_0; }
		
		//'ixy'
		public Keyword getIxyKeyword_4() { return cIxyKeyword_4; }
		
		//ixy=SIGNED_NUMERIC
		public Assignment getIxyAssignment_5() { return cIxyAssignment_5; }
		
		//SIGNED_NUMERIC
		public RuleCall getIxySIGNED_NUMERICParserRuleCall_5_0() { return cIxySIGNED_NUMERICParserRuleCall_5_0; }
		
		//'ixz'
		public Keyword getIxzKeyword_6() { return cIxzKeyword_6; }
		
		//ixz=SIGNED_NUMERIC
		public Assignment getIxzAssignment_7() { return cIxzAssignment_7; }
		
		//SIGNED_NUMERIC
		public RuleCall getIxzSIGNED_NUMERICParserRuleCall_7_0() { return cIxzSIGNED_NUMERICParserRuleCall_7_0; }
		
		//'iyy'
		public Keyword getIyyKeyword_8() { return cIyyKeyword_8; }
		
		//iyy=SIGNED_NUMERIC
		public Assignment getIyyAssignment_9() { return cIyyAssignment_9; }
		
		//SIGNED_NUMERIC
		public RuleCall getIyySIGNED_NUMERICParserRuleCall_9_0() { return cIyySIGNED_NUMERICParserRuleCall_9_0; }
		
		//'iyz'
		public Keyword getIyzKeyword_10() { return cIyzKeyword_10; }
		
		//iyz=SIGNED_NUMERIC
		public Assignment getIyzAssignment_11() { return cIyzAssignment_11; }
		
		//SIGNED_NUMERIC
		public RuleCall getIyzSIGNED_NUMERICParserRuleCall_11_0() { return cIyzSIGNED_NUMERICParserRuleCall_11_0; }
		
		//'izz'
		public Keyword getIzzKeyword_12() { return cIzzKeyword_12; }
		
		//izz=SIGNED_NUMERIC
		public Assignment getIzzAssignment_13() { return cIzzAssignment_13; }
		
		//SIGNED_NUMERIC
		public RuleCall getIzzSIGNED_NUMERICParserRuleCall_13_0() { return cIzzSIGNED_NUMERICParserRuleCall_13_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRed_green_blue_alphaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRedFLOATParserRuleCall_3_0 = (RuleCall)cRedAssignment_3.eContents().get(0);
		private final Assignment cGreenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGreenFLOATParserRuleCall_4_0 = (RuleCall)cGreenAssignment_4.eContents().get(0);
		private final Assignment cBlueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlueFLOATParserRuleCall_5_0 = (RuleCall)cBlueAssignment_5.eContents().get(0);
		private final Assignment cAlphaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAlphaFLOATParserRuleCall_6_0 = (RuleCall)cAlphaAssignment_6.eContents().get(0);
		
		//Color uRDF::Color: / * RGBA values must be floats between 0 and 1 incl * / 'Color' name=ID? 'red_green_blue_alpha'
		//	red=FLOAT green=FLOAT blue=FLOAT alpha=FLOAT
		@Override public ParserRule getRule() { return rule; }
		
		/// * RGBA values must be floats between 0 and 1 incl * / 'Color' name=ID? 'red_green_blue_alpha' red=FLOAT green=FLOAT
		//blue=FLOAT alpha=FLOAT
		public Group getGroup() { return cGroup; }
		
		/// * RGBA values must be floats between 0 and 1 incl * / 'Color'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'red_green_blue_alpha'
		public Keyword getRed_green_blue_alphaKeyword_2() { return cRed_green_blue_alphaKeyword_2; }
		
		//red=FLOAT
		public Assignment getRedAssignment_3() { return cRedAssignment_3; }
		
		//FLOAT
		public RuleCall getRedFLOATParserRuleCall_3_0() { return cRedFLOATParserRuleCall_3_0; }
		
		//green=FLOAT
		public Assignment getGreenAssignment_4() { return cGreenAssignment_4; }
		
		//FLOAT
		public RuleCall getGreenFLOATParserRuleCall_4_0() { return cGreenFLOATParserRuleCall_4_0; }
		
		//blue=FLOAT
		public Assignment getBlueAssignment_5() { return cBlueAssignment_5; }
		
		//FLOAT
		public RuleCall getBlueFLOATParserRuleCall_5_0() { return cBlueFLOATParserRuleCall_5_0; }
		
		//alpha=FLOAT
		public Assignment getAlphaAssignment_6() { return cAlphaAssignment_6; }
		
		//FLOAT
		public RuleCall getAlphaFLOATParserRuleCall_6_0() { return cAlphaFLOATParserRuleCall_6_0; }
	}
	public class TextureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Texture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPathToFileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathToFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathToFileSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathToFileAssignment_3.eContents().get(0);
		
		//Texture uRDF::Texture:
		//	'Texture' name=ID? 'pathToFile' pathToFile=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//'Texture' name=ID? 'pathToFile' pathToFile=STRING
		public Group getGroup() { return cGroup; }
		
		//'Texture'
		public Keyword getTextureKeyword_0() { return cTextureKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'pathToFile'
		public Keyword getPathToFileKeyword_2() { return cPathToFileKeyword_2; }
		
		//pathToFile=STRING
		public Assignment getPathToFileAssignment_3() { return cPathToFileAssignment_3; }
		
		//STRING
		public RuleCall getPathToFileSTRINGTerminalRuleCall_3_0() { return cPathToFileSTRINGTerminalRuleCall_3_0; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHeight_length_widthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightMEASUREParserRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Assignment cLengthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLengthMEASUREParserRuleCall_4_0 = (RuleCall)cLengthAssignment_4.eContents().get(0);
		private final Assignment cWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWidthMEASUREParserRuleCall_5_0 = (RuleCall)cWidthAssignment_5.eContents().get(0);
		
		//Box uRDF::Box:
		//	'Box' name=ID? //Tjek spec: order listing of dimensions?
		// 'height_length_width' height=MEASURE length=MEASURE
		//	width=MEASURE
		@Override public ParserRule getRule() { return rule; }
		
		//'Box' name=ID? //Tjek spec: order listing of dimensions?
		// 'height_length_width' height=MEASURE length=MEASURE
		//width=MEASURE
		public Group getGroup() { return cGroup; }
		
		//'Box'
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////Tjek spec: order listing of dimensions?
		// 'height_length_width'
		public Keyword getHeight_length_widthKeyword_2() { return cHeight_length_widthKeyword_2; }
		
		//height=MEASURE
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }
		
		//MEASURE
		public RuleCall getHeightMEASUREParserRuleCall_3_0() { return cHeightMEASUREParserRuleCall_3_0; }
		
		//length=MEASURE
		public Assignment getLengthAssignment_4() { return cLengthAssignment_4; }
		
		//MEASURE
		public RuleCall getLengthMEASUREParserRuleCall_4_0() { return cLengthMEASUREParserRuleCall_4_0; }
		
		//width=MEASURE
		public Assignment getWidthAssignment_5() { return cWidthAssignment_5; }
		
		//MEASURE
		public RuleCall getWidthMEASUREParserRuleCall_5_0() { return cWidthMEASUREParserRuleCall_5_0; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusMEASUREParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cLengthKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLengthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLengthMEASUREParserRuleCall_5_0 = (RuleCall)cLengthAssignment_5.eContents().get(0);
		
		//Cylinder uRDF::Cylinder:
		//	'Cylinder' name=ID? 'radius' radius=MEASURE 'length' length=MEASURE
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder' name=ID? 'radius' radius=MEASURE 'length' length=MEASURE
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=MEASURE
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//MEASURE
		public RuleCall getRadiusMEASUREParserRuleCall_3_0() { return cRadiusMEASUREParserRuleCall_3_0; }
		
		//'length'
		public Keyword getLengthKeyword_4() { return cLengthKeyword_4; }
		
		//length=MEASURE
		public Assignment getLengthAssignment_5() { return cLengthAssignment_5; }
		
		//MEASURE
		public RuleCall getLengthMEASUREParserRuleCall_5_0() { return cLengthMEASUREParserRuleCall_5_0; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPathToFileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathToFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathToFileSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathToFileAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScaleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBoxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBoxBoxCrossReference_4_1_0 = (CrossReference)cBoxAssignment_4_1.eContents().get(0);
		private final RuleCall cBoxBoxSTRINGTerminalRuleCall_4_1_0_1 = (RuleCall)cBoxBoxCrossReference_4_1_0.eContents().get(1);
		
		//Mesh uRDF::Mesh:
		//	'Mesh' name=ID? 'pathToFile' pathToFile=STRING ('scale' box=[uRDF::Box|STRING])?
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh' name=ID? 'pathToFile' pathToFile=STRING ('scale' box=[uRDF::Box|STRING])?
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'pathToFile'
		public Keyword getPathToFileKeyword_2() { return cPathToFileKeyword_2; }
		
		//pathToFile=STRING
		public Assignment getPathToFileAssignment_3() { return cPathToFileAssignment_3; }
		
		//STRING
		public RuleCall getPathToFileSTRINGTerminalRuleCall_3_0() { return cPathToFileSTRINGTerminalRuleCall_3_0; }
		
		//('scale' box=[uRDF::Box|STRING])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'scale'
		public Keyword getScaleKeyword_4_0() { return cScaleKeyword_4_0; }
		
		//box=[uRDF::Box|STRING]
		public Assignment getBoxAssignment_4_1() { return cBoxAssignment_4_1; }
		
		//[uRDF::Box|STRING]
		public CrossReference getBoxBoxCrossReference_4_1_0() { return cBoxBoxCrossReference_4_1_0; }
		
		//STRING
		public RuleCall getBoxBoxSTRINGTerminalRuleCall_4_1_0_1() { return cBoxBoxSTRINGTerminalRuleCall_4_1_0_1; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusMEASUREParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		
		//Sphere uRDF::Sphere:
		//	'Sphere' name=ID? 'radius' radius=MEASURE
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere' name=ID? 'radius' radius=MEASURE
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=MEASURE
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//MEASURE
		public RuleCall getRadiusMEASUREParserRuleCall_3_0() { return cRadiusMEASUREParserRuleCall_3_0; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEffortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEffortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEffortSIGNED_NUMERICParserRuleCall_2_0 = (RuleCall)cEffortAssignment_2.eContents().get(0);
		private final Keyword cVelocityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVelocityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVelocitySIGNED_NUMERICParserRuleCall_4_0 = (RuleCall)cVelocityAssignment_4.eContents().get(0);
		private final Keyword cLowerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLowerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLowerSIGNED_NUMERICParserRuleCall_6_0 = (RuleCall)cLowerAssignment_6.eContents().get(0);
		private final Keyword cUpperKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cUpperAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUpperSIGNED_NUMERICParserRuleCall_8_0 = (RuleCall)cUpperAssignment_8.eContents().get(0);
		
		//Limit uRDF::Limit:
		//	name=ID? 'effort' effort=SIGNED_NUMERIC 'velocity' velocity=SIGNED_NUMERIC 'lower' lower=SIGNED_NUMERIC? 'upper'
		//	upper=SIGNED_NUMERIC?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID? 'effort' effort=SIGNED_NUMERIC 'velocity' velocity=SIGNED_NUMERIC 'lower' lower=SIGNED_NUMERIC? 'upper'
		//upper=SIGNED_NUMERIC?
		public Group getGroup() { return cGroup; }
		
		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'effort'
		public Keyword getEffortKeyword_1() { return cEffortKeyword_1; }
		
		//effort=SIGNED_NUMERIC
		public Assignment getEffortAssignment_2() { return cEffortAssignment_2; }
		
		//SIGNED_NUMERIC
		public RuleCall getEffortSIGNED_NUMERICParserRuleCall_2_0() { return cEffortSIGNED_NUMERICParserRuleCall_2_0; }
		
		//'velocity'
		public Keyword getVelocityKeyword_3() { return cVelocityKeyword_3; }
		
		//velocity=SIGNED_NUMERIC
		public Assignment getVelocityAssignment_4() { return cVelocityAssignment_4; }
		
		//SIGNED_NUMERIC
		public RuleCall getVelocitySIGNED_NUMERICParserRuleCall_4_0() { return cVelocitySIGNED_NUMERICParserRuleCall_4_0; }
		
		//'lower'
		public Keyword getLowerKeyword_5() { return cLowerKeyword_5; }
		
		//lower=SIGNED_NUMERIC?
		public Assignment getLowerAssignment_6() { return cLowerAssignment_6; }
		
		//SIGNED_NUMERIC
		public RuleCall getLowerSIGNED_NUMERICParserRuleCall_6_0() { return cLowerSIGNED_NUMERICParserRuleCall_6_0; }
		
		//'upper'
		public Keyword getUpperKeyword_7() { return cUpperKeyword_7; }
		
		//upper=SIGNED_NUMERIC?
		public Assignment getUpperAssignment_8() { return cUpperAssignment_8; }
		
		//SIGNED_NUMERIC
		public RuleCall getUpperSIGNED_NUMERICParserRuleCall_8_0() { return cUpperSIGNED_NUMERICParserRuleCall_8_0; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cXyzKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXAXIS_VALUETerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYAXIS_VALUETerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Assignment cZAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cZAXIS_VALUETerminalRuleCall_4_0 = (RuleCall)cZAssignment_4.eContents().get(0);
		
		//Axis uRDF::Axis:
		//	name=ID? //keyword aliases: 'xyz' or 'x', 'y', 'z'
		// 'xyz' x=AXIS_VALUE y=AXIS_VALUE z=AXIS_VALUE
		@Override public ParserRule getRule() { return rule; }
		
		/// * Binary values - must be 0 or 1. Digitsum must be 1* / name=ID? //keyword aliases: 'xyz' or 'x', 'y', 'z'
		// 'xyz'
		//x=AXIS_VALUE y=AXIS_VALUE z=AXIS_VALUE
		public Group getGroup() { return cGroup; }
		
		/// * Binary values - must be 0 or 1. Digitsum must be 1* / name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		////keyword aliases: 'xyz' or 'x', 'y', 'z'
		// 'xyz'
		public Keyword getXyzKeyword_1() { return cXyzKeyword_1; }
		
		//x=AXIS_VALUE
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//AXIS_VALUE
		public RuleCall getXAXIS_VALUETerminalRuleCall_2_0() { return cXAXIS_VALUETerminalRuleCall_2_0; }
		
		//y=AXIS_VALUE
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//AXIS_VALUE
		public RuleCall getYAXIS_VALUETerminalRuleCall_3_0() { return cYAXIS_VALUETerminalRuleCall_3_0; }
		
		//z=AXIS_VALUE
		public Assignment getZAssignment_4() { return cZAssignment_4; }
		
		//AXIS_VALUE
		public RuleCall getZAXIS_VALUETerminalRuleCall_4_0() { return cZAXIS_VALUETerminalRuleCall_4_0; }
	}
	public class CalibrationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Calibration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCalibrationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRisingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRisingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRisingSIGNED_NUMERICParserRuleCall_2_1_0 = (RuleCall)cRisingAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFallingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFallingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFallingSIGNED_NUMERICParserRuleCall_3_1_0 = (RuleCall)cFallingAssignment_3_1.eContents().get(0);
		
		//Calibration uRDF::Calibration:
		//	{uRDF::Calibration} name=ID? ('rising' rising=SIGNED_NUMERIC)? ('falling' falling=SIGNED_NUMERIC)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Calibration} name=ID? ('rising' rising=SIGNED_NUMERIC)? ('falling' falling=SIGNED_NUMERIC)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Calibration}
		public Action getCalibrationAction_0() { return cCalibrationAction_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('rising' rising=SIGNED_NUMERIC)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'rising'
		public Keyword getRisingKeyword_2_0() { return cRisingKeyword_2_0; }
		
		//rising=SIGNED_NUMERIC
		public Assignment getRisingAssignment_2_1() { return cRisingAssignment_2_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getRisingSIGNED_NUMERICParserRuleCall_2_1_0() { return cRisingSIGNED_NUMERICParserRuleCall_2_1_0; }
		
		//('falling' falling=SIGNED_NUMERIC)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'falling'
		public Keyword getFallingKeyword_3_0() { return cFallingKeyword_3_0; }
		
		//falling=SIGNED_NUMERIC
		public Assignment getFallingAssignment_3_1() { return cFallingAssignment_3_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getFallingSIGNED_NUMERICParserRuleCall_3_1_0() { return cFallingSIGNED_NUMERICParserRuleCall_3_1_0; }
	}
	public class DynamicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Dynamics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDynamicsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFrictionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFrictionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFrictionSIGNED_NUMERICParserRuleCall_2_1_0 = (RuleCall)cFrictionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDampingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDampingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDampingSIGNED_NUMERICParserRuleCall_3_1_0 = (RuleCall)cDampingAssignment_3_1.eContents().get(0);
		
		//Dynamics uRDF::Dynamics:
		//	{uRDF::Dynamics} name=ID? ('friction' friction=SIGNED_NUMERIC)? ('damping' damping=SIGNED_NUMERIC)?
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Dynamics} name=ID? ('friction' friction=SIGNED_NUMERIC)? ('damping' damping=SIGNED_NUMERIC)?
		public Group getGroup() { return cGroup; }
		
		//{uRDF::Dynamics}
		public Action getDynamicsAction_0() { return cDynamicsAction_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('friction' friction=SIGNED_NUMERIC)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'friction'
		public Keyword getFrictionKeyword_2_0() { return cFrictionKeyword_2_0; }
		
		//friction=SIGNED_NUMERIC
		public Assignment getFrictionAssignment_2_1() { return cFrictionAssignment_2_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getFrictionSIGNED_NUMERICParserRuleCall_2_1_0() { return cFrictionSIGNED_NUMERICParserRuleCall_2_1_0; }
		
		//('damping' damping=SIGNED_NUMERIC)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'damping'
		public Keyword getDampingKeyword_3_0() { return cDampingKeyword_3_0; }
		
		//damping=SIGNED_NUMERIC
		public Assignment getDampingAssignment_3_1() { return cDampingAssignment_3_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getDampingSIGNED_NUMERICParserRuleCall_3_1_0() { return cDampingSIGNED_NUMERICParserRuleCall_3_1_0; }
	}
	public class MimicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.Mimic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cMimicsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMimicsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMimicsJointCrossReference_2_0 = (CrossReference)cMimicsAssignment_2.eContents().get(0);
		private final RuleCall cMimicsJointIDTerminalRuleCall_2_0_1 = (RuleCall)cMimicsJointCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMultiplierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMultiplierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMultiplierSIGNED_NUMERICParserRuleCall_3_1_0 = (RuleCall)cMultiplierAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOffSetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOffSetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOffSetSIGNED_NUMERICParserRuleCall_4_1_0 = (RuleCall)cOffSetAssignment_4_1.eContents().get(0);
		
		//Mimic uRDF::Mimic:
		//	name=ID? 'mimics' mimics=[uRDF::Joint] ('multiplier' multiplier=SIGNED_NUMERIC)? ('offSet' offSet=SIGNED_NUMERIC)?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID? 'mimics' mimics=[uRDF::Joint] ('multiplier' multiplier=SIGNED_NUMERIC)? ('offSet' offSet=SIGNED_NUMERIC)?
		public Group getGroup() { return cGroup; }
		
		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'mimics'
		public Keyword getMimicsKeyword_1() { return cMimicsKeyword_1; }
		
		//mimics=[uRDF::Joint]
		public Assignment getMimicsAssignment_2() { return cMimicsAssignment_2; }
		
		//[uRDF::Joint]
		public CrossReference getMimicsJointCrossReference_2_0() { return cMimicsJointCrossReference_2_0; }
		
		//ID
		public RuleCall getMimicsJointIDTerminalRuleCall_2_0_1() { return cMimicsJointIDTerminalRuleCall_2_0_1; }
		
		//('multiplier' multiplier=SIGNED_NUMERIC)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'multiplier'
		public Keyword getMultiplierKeyword_3_0() { return cMultiplierKeyword_3_0; }
		
		//multiplier=SIGNED_NUMERIC
		public Assignment getMultiplierAssignment_3_1() { return cMultiplierAssignment_3_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getMultiplierSIGNED_NUMERICParserRuleCall_3_1_0() { return cMultiplierSIGNED_NUMERICParserRuleCall_3_1_0; }
		
		//('offSet' offSet=SIGNED_NUMERIC)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'offSet'
		public Keyword getOffSetKeyword_4_0() { return cOffSetKeyword_4_0; }
		
		//offSet=SIGNED_NUMERIC
		public Assignment getOffSetAssignment_4_1() { return cOffSetAssignment_4_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getOffSetSIGNED_NUMERICParserRuleCall_4_1_0() { return cOffSetSIGNED_NUMERICParserRuleCall_4_1_0; }
	}
	public class SafetyControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SafetyController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSoftLowerLimitKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSoftLowerLimitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSoftLowerLimitSIGNED_NUMERICParserRuleCall_1_1_0 = (RuleCall)cSoftLowerLimitAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSoftUpperLimitKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSoftUpperLimitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSoftUpperLimitSIGNED_NUMERICParserRuleCall_2_1_0 = (RuleCall)cSoftUpperLimitAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cK_positionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cK_positionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cK_positionSIGNED_NUMERICParserRuleCall_3_1_0 = (RuleCall)cK_positionAssignment_3_1.eContents().get(0);
		private final Keyword cK_velocityKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cK_velocityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cK_velocitySIGNED_NUMERICParserRuleCall_5_0 = (RuleCall)cK_velocityAssignment_5.eContents().get(0);
		
		//SafetyController uRDF::SafetyController:
		//	name=ID? ('softLowerLimit' softLowerLimit=SIGNED_NUMERIC)? ('softUpperLimit' softUpperLimit=SIGNED_NUMERIC)?
		//	('k_position' k_position=SIGNED_NUMERIC)? 'k_velocity' k_velocity=SIGNED_NUMERIC
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID? ('softLowerLimit' softLowerLimit=SIGNED_NUMERIC)? ('softUpperLimit' softUpperLimit=SIGNED_NUMERIC)?
		//('k_position' k_position=SIGNED_NUMERIC)? 'k_velocity' k_velocity=SIGNED_NUMERIC
		public Group getGroup() { return cGroup; }
		
		//name=ID?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('softLowerLimit' softLowerLimit=SIGNED_NUMERIC)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'softLowerLimit'
		public Keyword getSoftLowerLimitKeyword_1_0() { return cSoftLowerLimitKeyword_1_0; }
		
		//softLowerLimit=SIGNED_NUMERIC
		public Assignment getSoftLowerLimitAssignment_1_1() { return cSoftLowerLimitAssignment_1_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getSoftLowerLimitSIGNED_NUMERICParserRuleCall_1_1_0() { return cSoftLowerLimitSIGNED_NUMERICParserRuleCall_1_1_0; }
		
		//('softUpperLimit' softUpperLimit=SIGNED_NUMERIC)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'softUpperLimit'
		public Keyword getSoftUpperLimitKeyword_2_0() { return cSoftUpperLimitKeyword_2_0; }
		
		//softUpperLimit=SIGNED_NUMERIC
		public Assignment getSoftUpperLimitAssignment_2_1() { return cSoftUpperLimitAssignment_2_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getSoftUpperLimitSIGNED_NUMERICParserRuleCall_2_1_0() { return cSoftUpperLimitSIGNED_NUMERICParserRuleCall_2_1_0; }
		
		//('k_position' k_position=SIGNED_NUMERIC)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'k_position'
		public Keyword getK_positionKeyword_3_0() { return cK_positionKeyword_3_0; }
		
		//k_position=SIGNED_NUMERIC
		public Assignment getK_positionAssignment_3_1() { return cK_positionAssignment_3_1; }
		
		//SIGNED_NUMERIC
		public RuleCall getK_positionSIGNED_NUMERICParserRuleCall_3_1_0() { return cK_positionSIGNED_NUMERICParserRuleCall_3_1_0; }
		
		//'k_velocity'
		public Keyword getK_velocityKeyword_4() { return cK_velocityKeyword_4; }
		
		//k_velocity=SIGNED_NUMERIC
		public Assignment getK_velocityAssignment_5() { return cK_velocityAssignment_5; }
		
		//SIGNED_NUMERIC
		public RuleCall getK_velocitySIGNED_NUMERICParserRuleCall_5_0() { return cK_velocitySIGNED_NUMERICParserRuleCall_5_0; }
	}
	public class ConstantImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.ConstantImpl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cSIGNED_NUMERICParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////datatypes...
		// //skal vi droppe at Const kan indeholde STRING?
		// ConstantImpl uRDF::Constant:
		//	{uRDF::Constant} name=ID SIGNED_NUMERIC | STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{uRDF::Constant} name=ID SIGNED_NUMERIC | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{uRDF::Constant} name=ID SIGNED_NUMERIC
		public Group getGroup_0() { return cGroup_0; }
		
		//{uRDF::Constant}
		public Action getConstantAction_0_0() { return cConstantAction_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//SIGNED_NUMERIC
		public RuleCall getSIGNED_NUMERICParserRuleCall_0_2() { return cSIGNED_NUMERICParserRuleCall_0_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT ecore::EFloat:
		//	INT '.' INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class SCIENTIFICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SCIENTIFIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SCIENTIFIC ecore::EBigDecimal:
		//	FLOAT 'e' ('+' | '-')? INT
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT 'e' ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }
		
		//'e'
		public Keyword getEKeyword_1() { return cEKeyword_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}
	public class SIGNED_NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.SIGNED_NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSCIENTIFICParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		/// *SCIENTIFIC returns ecore::EBigDecimal:
		//    (INT ('.' (INT)?)? | '.' INT)
		//    (('e' | 'E') ('+' | '-')? INT)?;* /
		//SIGNED_NUMERIC:
		//	'-'? (INT | FLOAT | SCIENTIFIC);
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? (INT | FLOAT | SCIENTIFIC)
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//(INT | FLOAT | SCIENTIFIC)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1_1() { return cFLOATParserRuleCall_1_1; }
		
		//SCIENTIFIC
		public RuleCall getSCIENTIFICParserRuleCall_1_2() { return cSCIENTIFICParserRuleCall_1_2; }
	}
	public class MEASUREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.MEASURE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MEASURE:
		//	INT | FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
	}
	public class REFLECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.REFLECT");
		private final Keyword cReflectKeyword = (Keyword)rule.eContents().get(1);
		
		//REFLECT:
		//	'reflect';
		@Override public ParserRule getRule() { return rule; }
		
		//'reflect'
		public Keyword getReflectKeyword() { return cReflectKeyword; }
	}
	public class NLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.NL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cControl000aKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cControl000dKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NL:
		//	('\n' | '\r')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('\n' | '\r')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'\n'
		public Keyword getControl000aKeyword_0() { return cControl000aKeyword_0; }
		
		//'\r'
		public Keyword getControl000dKeyword_1() { return cControl000dKeyword_1; }
	}
	
	public class JointTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.JointType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFixedFixedKeyword_0_0 = (Keyword)cFixedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRevoluteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRevoluteRevoluteKeyword_1_0 = (Keyword)cRevoluteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrismaticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrismaticPrismaticKeyword_2_0 = (Keyword)cPrismaticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cContinuousContinuousKeyword_3_0 = (Keyword)cContinuousEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum JointType returns uRDF::JointType:
		//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
		public EnumRule getRule() { return rule; }
		
		//fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fixed='Fixed'
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_0() { return cFixedEnumLiteralDeclaration_0; }
		
		//'Fixed'
		public Keyword getFixedFixedKeyword_0_0() { return cFixedFixedKeyword_0_0; }
		
		//revolute='Revolute'
		public EnumLiteralDeclaration getRevoluteEnumLiteralDeclaration_1() { return cRevoluteEnumLiteralDeclaration_1; }
		
		//'Revolute'
		public Keyword getRevoluteRevoluteKeyword_1_0() { return cRevoluteRevoluteKeyword_1_0; }
		
		//prismatic='Prismatic'
		public EnumLiteralDeclaration getPrismaticEnumLiteralDeclaration_2() { return cPrismaticEnumLiteralDeclaration_2; }
		
		//'Prismatic'
		public Keyword getPrismaticPrismaticKeyword_2_0() { return cPrismaticPrismaticKeyword_2_0; }
		
		//continuous='Continuous'
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_3() { return cContinuousEnumLiteralDeclaration_3; }
		
		//'Continuous'
		public Keyword getContinuousContinuousKeyword_3_0() { return cContinuousContinuousKeyword_3_0; }
	}
	
	private final RobotElements pRobot;
	private final MaterialElements pMaterial;
	private final GeometryElements pGeometry;
	private final LinkElements pLink;
	private final JointElements pJoint;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final OriginElements pOrigin;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final ColorElements pColor;
	private final TextureElements pTexture;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final MeshElements pMesh;
	private final SphereElements pSphere;
	private final JointTypeElements eJointType;
	private final LimitElements pLimit;
	private final AxisElements pAxis;
	private final CalibrationElements pCalibration;
	private final DynamicsElements pDynamics;
	private final MimicElements pMimic;
	private final SafetyControllerElements pSafetyController;
	private final ConstantImplElements pConstantImpl;
	private final FLOATElements pFLOAT;
	private final SCIENTIFICElements pSCIENTIFIC;
	private final SIGNED_NUMERICElements pSIGNED_NUMERIC;
	private final MEASUREElements pMEASURE;
	private final TerminalRule tAXIS_VALUE;
	private final REFLECTElements pREFLECT;
	private final NLElements pNL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMaterial = new MaterialElements();
		this.pGeometry = new GeometryElements();
		this.pLink = new LinkElements();
		this.pJoint = new JointElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pOrigin = new OriginElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pColor = new ColorElements();
		this.pTexture = new TextureElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pMesh = new MeshElements();
		this.pSphere = new SphereElements();
		this.eJointType = new JointTypeElements();
		this.pLimit = new LimitElements();
		this.pAxis = new AxisElements();
		this.pCalibration = new CalibrationElements();
		this.pDynamics = new DynamicsElements();
		this.pMimic = new MimicElements();
		this.pSafetyController = new SafetyControllerElements();
		this.pConstantImpl = new ConstantImplElements();
		this.pFLOAT = new FLOATElements();
		this.pSCIENTIFIC = new SCIENTIFICElements();
		this.pSIGNED_NUMERIC = new SIGNED_NUMERICElements();
		this.pMEASURE = new MEASUREElements();
		this.tAXIS_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.urdf.Dsl.AXIS_VALUE");
		this.pREFLECT = new REFLECTElements();
		this.pNL = new NLElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.urdf.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Todo: 
	// * Expressions - inline for value assignment 
	// * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
	// * Topology of Link and Joint: How to specify?
	// * Add reflect as alternative in relevant places...
	// * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
	// * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
	// * Create ValueConverter to convert scale values to Box
	// * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
	// * DONE: Change interface to abstract class in metamodel
	// * DONE: ReUse - add reference in the metamodel
	// * DONE: Origin required should possibly be adjusted in metamodel?
	// * DONE: Scientific notation - how to implement?
	// * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
	// * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
	// * /
	//Robot uRDF::Robot:
	//	'Robot' name=ID (link+=Link | joint+=Joint)*
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Material uRDF::Material:
	//	Color | Texture
	public MaterialElements getMaterialAccess() {
		return pMaterial;
	}
	
	public ParserRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//Geometry uRDF::Geometry:
	//	Box | Cylinder | Mesh | Sphere
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Link uRDF::Link:
	//	'Link' name=ID //alle visuals skal defineres in order - ok?
	// visuals+=Visual* inertial+=Inertial*
	//	collision+=Collision*
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Joint uRDF::Joint:
	//	'Joint' name=ID 'Type' Type=JointType 'ChildOf' ChildOf=[uRDF::Link] 'ParentOf' ParentOf=[uRDF::Link] ('Limit'
	//	limit=Limit)? ('Axis' axis=Axis)? origin=Origin? ('Calibration' calibration=Calibration)? ('Dynamics'
	//	dynamics=Dynamics)? ('Mimic' mimic=Mimic)? ('SafetyController' safetycontroller=SafetyController)?
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Inertial uRDF::Inertial:
	//	'Inertial' name=ID? inertia=Inertia mass=Mass origin=Origin?
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual uRDF::Visual:
	//	'Visual' name=ID? 'Geometry' geometry=Geometry origin=Origin? ('Material' material=Material)?
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision uRDF::Collision:
	//	'Collision' name=ID 'Geometry' geometry=Geometry origin=Origin?
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Origin uRDF::Origin:
	//	'Origin' name=ID? 'xyz' x=SIGNED_NUMERIC y=SIGNED_NUMERIC z=SIGNED_NUMERIC ('roll_pitch_yaw' roll=SIGNED_NUMERIC
	//	pitch=SIGNED_NUMERIC yaw=SIGNED_NUMERIC)?
	public OriginElements getOriginAccess() {
		return pOrigin;
	}
	
	public ParserRule getOriginRule() {
		return getOriginAccess().getRule();
	}
	
	//Mass uRDF::Mass:
	//	'Mass' name=ID? 'massValueInKilograms' massValueInKilograms=FLOAT
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia uRDF::Inertia:
	//	'Inertia' name=ID? 'ixx' ixx=SIGNED_NUMERIC 'ixy' ixy=SIGNED_NUMERIC 'ixz' ixz=SIGNED_NUMERIC 'iyy'
	//	iyy=SIGNED_NUMERIC 'iyz' iyz=SIGNED_NUMERIC 'izz' izz=SIGNED_NUMERIC
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Color uRDF::Color: / * RGBA values must be floats between 0 and 1 incl * / 'Color' name=ID? 'red_green_blue_alpha'
	//	red=FLOAT green=FLOAT blue=FLOAT alpha=FLOAT
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//Texture uRDF::Texture:
	//	'Texture' name=ID? 'pathToFile' pathToFile=STRING
	public TextureElements getTextureAccess() {
		return pTexture;
	}
	
	public ParserRule getTextureRule() {
		return getTextureAccess().getRule();
	}
	
	//Box uRDF::Box:
	//	'Box' name=ID? //Tjek spec: order listing of dimensions?
	// 'height_length_width' height=MEASURE length=MEASURE
	//	width=MEASURE
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder uRDF::Cylinder:
	//	'Cylinder' name=ID? 'radius' radius=MEASURE 'length' length=MEASURE
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Mesh uRDF::Mesh:
	//	'Mesh' name=ID? 'pathToFile' pathToFile=STRING ('scale' box=[uRDF::Box|STRING])?
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//Sphere uRDF::Sphere:
	//	'Sphere' name=ID? 'radius' radius=MEASURE
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//enum JointType returns uRDF::JointType:
	//	fixed='Fixed' | revolute='Revolute' | prismatic='Prismatic' | continuous='Continuous';
	public JointTypeElements getJointTypeAccess() {
		return eJointType;
	}
	
	public EnumRule getJointTypeRule() {
		return getJointTypeAccess().getRule();
	}
	
	//Limit uRDF::Limit:
	//	name=ID? 'effort' effort=SIGNED_NUMERIC 'velocity' velocity=SIGNED_NUMERIC 'lower' lower=SIGNED_NUMERIC? 'upper'
	//	upper=SIGNED_NUMERIC?
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Axis uRDF::Axis:
	//	name=ID? //keyword aliases: 'xyz' or 'x', 'y', 'z'
	// 'xyz' x=AXIS_VALUE y=AXIS_VALUE z=AXIS_VALUE
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//Calibration uRDF::Calibration:
	//	{uRDF::Calibration} name=ID? ('rising' rising=SIGNED_NUMERIC)? ('falling' falling=SIGNED_NUMERIC)?
	public CalibrationElements getCalibrationAccess() {
		return pCalibration;
	}
	
	public ParserRule getCalibrationRule() {
		return getCalibrationAccess().getRule();
	}
	
	//Dynamics uRDF::Dynamics:
	//	{uRDF::Dynamics} name=ID? ('friction' friction=SIGNED_NUMERIC)? ('damping' damping=SIGNED_NUMERIC)?
	public DynamicsElements getDynamicsAccess() {
		return pDynamics;
	}
	
	public ParserRule getDynamicsRule() {
		return getDynamicsAccess().getRule();
	}
	
	//Mimic uRDF::Mimic:
	//	name=ID? 'mimics' mimics=[uRDF::Joint] ('multiplier' multiplier=SIGNED_NUMERIC)? ('offSet' offSet=SIGNED_NUMERIC)?
	public MimicElements getMimicAccess() {
		return pMimic;
	}
	
	public ParserRule getMimicRule() {
		return getMimicAccess().getRule();
	}
	
	//SafetyController uRDF::SafetyController:
	//	name=ID? ('softLowerLimit' softLowerLimit=SIGNED_NUMERIC)? ('softUpperLimit' softUpperLimit=SIGNED_NUMERIC)?
	//	('k_position' k_position=SIGNED_NUMERIC)? 'k_velocity' k_velocity=SIGNED_NUMERIC
	public SafetyControllerElements getSafetyControllerAccess() {
		return pSafetyController;
	}
	
	public ParserRule getSafetyControllerRule() {
		return getSafetyControllerAccess().getRule();
	}
	
	////datatypes...
	// //skal vi droppe at Const kan indeholde STRING?
	// ConstantImpl uRDF::Constant:
	//	{uRDF::Constant} name=ID SIGNED_NUMERIC | STRING
	public ConstantImplElements getConstantImplAccess() {
		return pConstantImpl;
	}
	
	public ParserRule getConstantImplRule() {
		return getConstantImplAccess().getRule();
	}
	
	//FLOAT ecore::EFloat:
	//	INT '.' INT
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//SCIENTIFIC ecore::EBigDecimal:
	//	FLOAT 'e' ('+' | '-')? INT
	public SCIENTIFICElements getSCIENTIFICAccess() {
		return pSCIENTIFIC;
	}
	
	public ParserRule getSCIENTIFICRule() {
		return getSCIENTIFICAccess().getRule();
	}
	
	/// *SCIENTIFIC returns ecore::EBigDecimal:
	//    (INT ('.' (INT)?)? | '.' INT)
	//    (('e' | 'E') ('+' | '-')? INT)?;* /
	//SIGNED_NUMERIC:
	//	'-'? (INT | FLOAT | SCIENTIFIC);
	public SIGNED_NUMERICElements getSIGNED_NUMERICAccess() {
		return pSIGNED_NUMERIC;
	}
	
	public ParserRule getSIGNED_NUMERICRule() {
		return getSIGNED_NUMERICAccess().getRule();
	}
	
	//MEASURE:
	//	INT | FLOAT;
	public MEASUREElements getMEASUREAccess() {
		return pMEASURE;
	}
	
	public ParserRule getMEASURERule() {
		return getMEASUREAccess().getRule();
	}
	
	//terminal AXIS_VALUE returns ecore::EInt:
	//	'0'..'1';
	public TerminalRule getAXIS_VALUERule() {
		return tAXIS_VALUE;
	}
	
	//REFLECT:
	//	'reflect';
	public REFLECTElements getREFLECTAccess() {
		return pREFLECT;
	}
	
	public ParserRule getREFLECTRule() {
		return getREFLECTAccess().getRule();
	}
	
	//NL:
	//	('\n' | '\r')+;
	public NLElements getNLAccess() {
		return pNL;
	}
	
	public ParserRule getNLRule() {
		return getNLAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
