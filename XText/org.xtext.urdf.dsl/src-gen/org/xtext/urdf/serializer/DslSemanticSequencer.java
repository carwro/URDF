/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.urdf.services.DslGrammarAccess;
import uRDF.Axis;
import uRDF.Box;
import uRDF.Calibration;
import uRDF.Collision;
import uRDF.Color;
import uRDF.Cylinder;
import uRDF.Dynamics;
import uRDF.Inertia;
import uRDF.Inertial;
import uRDF.Joint;
import uRDF.Limit;
import uRDF.Link;
import uRDF.Mass;
import uRDF.Mesh;
import uRDF.Mimic;
import uRDF.Origin;
import uRDF.Robot;
import uRDF.SafetyController;
import uRDF.Sphere;
import uRDF.Texture;
import uRDF.URDFPackage;
import uRDF.Visual;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == URDFPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case URDFPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case URDFPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case URDFPackage.CALIBRATION:
				sequence_Calibration(context, (Calibration) semanticObject); 
				return; 
			case URDFPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case URDFPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case URDFPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case URDFPackage.DYNAMICS:
				sequence_Dynamics(context, (Dynamics) semanticObject); 
				return; 
			case URDFPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case URDFPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case URDFPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case URDFPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case URDFPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case URDFPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case URDFPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case URDFPackage.MIMIC:
				sequence_Mimic(context, (Mimic) semanticObject); 
				return; 
			case URDFPackage.ORIGIN:
				sequence_Origin(context, (Origin) semanticObject); 
				return; 
			case URDFPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case URDFPackage.SAFETY_CONTROLLER:
				sequence_SafetyController(context, (SafetyController) semanticObject); 
				return; 
			case URDFPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case URDFPackage.TEXTURE:
				sequence_Texture(context, (Texture) semanticObject); 
				return; 
			case URDFPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     (name=ID x=INT y=INT z=INT)
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.AXIS__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.AXIS__X));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.AXIS__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.AXIS__Y));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.AXIS__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.AXIS__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAxisAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAxisAccess().getXINTTerminalRuleCall_3_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getAxisAccess().getYINTTerminalRuleCall_5_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getAxisAccess().getZINTTerminalRuleCall_7_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Box
	 *     Box returns Box
	 *
	 * Constraint:
	 *     (name=ID height=FLOAT? length=FLOAT? width=FLOAT?)
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calibration returns Calibration
	 *
	 * Constraint:
	 *     (name=ID rising=FLOAT? falling=FLOAT?)
	 */
	protected void sequence_Calibration(ISerializationContext context, Calibration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (name=ID geometry=Geometry origin=Origin)
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.COLLISION__GEOMETRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.COLLISION__GEOMETRY));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.COLLISION__ORIGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.COLLISION__ORIGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCollisionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCollisionAccess().getGeometryGeometryParserRuleCall_1_0(), semanticObject.getGeometry());
		feeder.accept(grammarAccess.getCollisionAccess().getOriginOriginParserRuleCall_2_0(), semanticObject.getOrigin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Color
	 *     Color returns Color
	 *
	 * Constraint:
	 *     (name=ID red=FLOAT? green=FLOAT? blue=FLOAT? alpha=FLOAT?)
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Cylinder
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     (name=ID radius=FLOAT? length=FLOAT?)
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dynamics returns Dynamics
	 *
	 * Constraint:
	 *     (name=ID friction=FLOAT? damping=FLOAT?)
	 */
	protected void sequence_Dynamics(ISerializationContext context, Dynamics semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ixx=FLOAT 
	 *         ixy=FLOAT 
	 *         ixz=FLOAT 
	 *         iyy=FLOAT 
	 *         iyz=FLOAT 
	 *         izz=FLOAT
	 *     )
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IXX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IXX));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IXY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IXY));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IXZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IXZ));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IYY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IYY));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IYZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IYZ));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIA__IZZ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIA__IZZ));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInertiaAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInertiaAccess().getIxxFLOATParserRuleCall_3_0(), semanticObject.getIxx());
		feeder.accept(grammarAccess.getInertiaAccess().getIxyFLOATParserRuleCall_5_0(), semanticObject.getIxy());
		feeder.accept(grammarAccess.getInertiaAccess().getIxzFLOATParserRuleCall_7_0(), semanticObject.getIxz());
		feeder.accept(grammarAccess.getInertiaAccess().getIyyFLOATParserRuleCall_9_0(), semanticObject.getIyy());
		feeder.accept(grammarAccess.getInertiaAccess().getIyzFLOATParserRuleCall_11_0(), semanticObject.getIyz());
		feeder.accept(grammarAccess.getInertiaAccess().getIzzFLOATParserRuleCall_13_0(), semanticObject.getIzz());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (name=ID origin=Origin mass=Mass inertia=Inertia)
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIAL__ORIGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIAL__ORIGIN));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIAL__MASS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIAL__MASS));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.INERTIAL__INERTIA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.INERTIAL__INERTIA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInertialAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInertialAccess().getOriginOriginParserRuleCall_1_0(), semanticObject.getOrigin());
		feeder.accept(grammarAccess.getInertialAccess().getMassMassParserRuleCall_2_0(), semanticObject.getMass());
		feeder.accept(grammarAccess.getInertialAccess().getInertiaInertiaParserRuleCall_3_0(), semanticObject.getInertia());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         Type=JointType 
	 *         ChildOf=[Link|STRING] 
	 *         ParentOf=[Link|STRING] 
	 *         limit=Limit? 
	 *         axis=Axis? 
	 *         origin=Origin 
	 *         calibration=Calibration? 
	 *         dynamics=Dynamics? 
	 *         mimic=Mimic? 
	 *         safetycontroller=SafetyController?
	 *     )
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (name=ID lower=FLOAT upper=FLOAT effort=FLOAT velocity=FLOAT)
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.LIMIT__LOWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.LIMIT__LOWER));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.LIMIT__UPPER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.LIMIT__UPPER));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.LIMIT__EFFORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.LIMIT__EFFORT));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.LIMIT__VELOCITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.LIMIT__VELOCITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLimitAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLimitAccess().getLowerFLOATParserRuleCall_3_0(), semanticObject.getLower());
		feeder.accept(grammarAccess.getLimitAccess().getUpperFLOATParserRuleCall_5_0(), semanticObject.getUpper());
		feeder.accept(grammarAccess.getLimitAccess().getEffortFLOATParserRuleCall_7_0(), semanticObject.getEffort());
		feeder.accept(grammarAccess.getLimitAccess().getVelocityFLOATParserRuleCall_9_0(), semanticObject.getVelocity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID inertial+=Inertial* visuals+=Visual* collision+=Collision*)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     (name=ID massValueInKilograms=FLOAT)
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, URDFPackage.Literals.MASS__MASS_VALUE_IN_KILOGRAMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, URDFPackage.Literals.MASS__MASS_VALUE_IN_KILOGRAMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMassAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMassAccess().getMassValueInKilogramsFLOATParserRuleCall_3_0(), semanticObject.getMassValueInKilograms());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Mesh
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     (name=ID pathToFile=STRING? box=[Box|STRING]?)
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mimic returns Mimic
	 *
	 * Constraint:
	 *     (name=ID multiplier=FLOAT? offSet=FLOAT? mimics=[Joint|STRING]?)
	 */
	protected void sequence_Mimic(ISerializationContext context, Mimic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Origin returns Origin
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         x=FLOAT? 
	 *         y=FLOAT? 
	 *         z=FLOAT? 
	 *         roll=FLOAT? 
	 *         pitch=FLOAT? 
	 *         yaw=FLOAT?
	 *     )
	 */
	protected void sequence_Origin(ISerializationContext context, Origin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID link+=Link+ joint+=Joint*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyController returns SafetyController
	 *
	 * Constraint:
	 *     (name=ID softLowerLimit=FLOAT? softUpperLimit=FLOAT? k_position=FLOAT? k_velocity=FLOAT?)
	 */
	protected void sequence_SafetyController(ISerializationContext context, SafetyController semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Sphere
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     (name=ID radius=FLOAT?)
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Texture
	 *     Texture returns Texture
	 *
	 * Constraint:
	 *     (name=ID pathToFile=STRING?)
	 */
	protected void sequence_Texture(ISerializationContext context, Texture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (name=ID material=Material? origin=Origin geometry=Geometry)
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
