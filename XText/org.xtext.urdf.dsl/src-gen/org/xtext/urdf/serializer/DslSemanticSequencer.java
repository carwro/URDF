/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.urdf.services.DslGrammarAccess;
import uRDF.Axis;
import uRDF.Box;
import uRDF.Calibration;
import uRDF.Collision;
import uRDF.Color;
import uRDF.Cylinder;
import uRDF.Dynamics;
import uRDF.Inertia;
import uRDF.Inertial;
import uRDF.Joint;
import uRDF.Limit;
import uRDF.Link;
import uRDF.Mass;
import uRDF.Mesh;
import uRDF.Mimic;
import uRDF.Origin;
import uRDF.Robot;
import uRDF.SafetyController;
import uRDF.Sphere;
import uRDF.Texture;
import uRDF.URDFPackage;
import uRDF.Visual;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == URDFPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case URDFPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case URDFPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case URDFPackage.CALIBRATION:
				sequence_Calibration(context, (Calibration) semanticObject); 
				return; 
			case URDFPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case URDFPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case URDFPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case URDFPackage.DYNAMICS:
				sequence_Dynamics(context, (Dynamics) semanticObject); 
				return; 
			case URDFPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case URDFPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case URDFPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case URDFPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case URDFPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case URDFPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case URDFPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case URDFPackage.MIMIC:
				sequence_Mimic(context, (Mimic) semanticObject); 
				return; 
			case URDFPackage.ORIGIN:
				sequence_Origin(context, (Origin) semanticObject); 
				return; 
			case URDFPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case URDFPackage.SAFETY_CONTROLLER:
				sequence_SafetyController(context, (SafetyController) semanticObject); 
				return; 
			case URDFPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case URDFPackage.TEXTURE:
				sequence_Texture(context, (Texture) semanticObject); 
				return; 
			case URDFPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     ((name=ID? x=INT y=INT z=INT) | (x=INT y=INT z=INT))
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Box
	 *     Box returns Box
	 *
	 * Constraint:
	 *     ((name=ID? height=FLOAT length=FLOAT width=FLOAT) | (height=FLOAT length=FLOAT width=FLOAT))
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calibration returns Calibration
	 *
	 * Constraint:
	 *     (name=ID? rising=FLOAT? falling=FLOAT?)
	 */
	protected void sequence_Calibration(ISerializationContext context, Calibration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (name=ID geometry=Geometry origin=Origin?)
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Color
	 *     Color returns Color
	 *
	 * Constraint:
	 *     ((name=ID? red=FLOAT green=FLOAT blue=FLOAT alpha=FLOAT) | (red=FLOAT green=FLOAT blue=FLOAT alpha=FLOAT))
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Cylinder
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     (name=ID? radius=FLOAT length=FLOAT)
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dynamics returns Dynamics
	 *
	 * Constraint:
	 *     (name=ID? friction=FLOAT? damping=FLOAT?)
	 */
	protected void sequence_Dynamics(ISerializationContext context, Dynamics semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         ixx=FLOAT 
	 *         ixy=FLOAT 
	 *         ixz=FLOAT 
	 *         iyy=FLOAT 
	 *         iyz=FLOAT 
	 *         izz=FLOAT
	 *     )
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (name=ID? inertia=Inertia mass=Mass origin=Origin?)
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         Type=JointType 
	 *         ChildOf=[Link|ID] 
	 *         ParentOf=[Link|ID] 
	 *         limit=Limit? 
	 *         axis=Axis? 
	 *         origin=Origin? 
	 *         calibration=Calibration? 
	 *         dynamics=Dynamics? 
	 *         mimic=Mimic? 
	 *         safetycontroller=SafetyController?
	 *     )
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (name=ID? lower=FLOAT? upper=FLOAT? effort=FLOAT velocity=FLOAT)
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID visuals+=Visual* inertial+=Inertial* collision+=Collision*)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     (name=ID? massValueInKilograms=FLOAT)
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Mesh
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     (name=ID? pathToFile=STRING box=[Box|STRING]?)
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mimic returns Mimic
	 *
	 * Constraint:
	 *     (name=ID? mimics=[Joint|STRING] multiplier=FLOAT? offSet=FLOAT?)
	 */
	protected void sequence_Mimic(ISerializationContext context, Mimic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Origin returns Origin
	 *
	 * Constraint:
	 *     (name=ID? x=FLOAT y=FLOAT z=FLOAT (roll=FLOAT pitch=FLOAT yaw=FLOAT)?)
	 */
	protected void sequence_Origin(ISerializationContext context, Origin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=ID link+=Link+ joint+=Joint*)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyController returns SafetyController
	 *
	 * Constraint:
	 *     (name=ID? softLowerLimit=FLOAT? softUpperLimit=FLOAT? k_position=FLOAT? k_velocity=FLOAT)
	 */
	protected void sequence_SafetyController(ISerializationContext context, SafetyController semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Sphere
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     (name=ID? radius=FLOAT)
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Texture
	 *     Texture returns Texture
	 *
	 * Constraint:
	 *     (name=ID? pathToFile=STRING)
	 */
	protected void sequence_Texture(ISerializationContext context, Texture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (name=ID? geometry=Geometry origin=Origin? material=Material?)
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
