/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.urdf.domainmodel.Axis;
import org.xtext.urdf.domainmodel.Box;
import org.xtext.urdf.domainmodel.Callibration;
import org.xtext.urdf.domainmodel.Collision;
import org.xtext.urdf.domainmodel.Color;
import org.xtext.urdf.domainmodel.Cylinder;
import org.xtext.urdf.domainmodel.DomainmodelPackage;
import org.xtext.urdf.domainmodel.Dynamics;
import org.xtext.urdf.domainmodel.Geometry;
import org.xtext.urdf.domainmodel.Inertia;
import org.xtext.urdf.domainmodel.Inertial;
import org.xtext.urdf.domainmodel.Joint;
import org.xtext.urdf.domainmodel.Limit;
import org.xtext.urdf.domainmodel.Link;
import org.xtext.urdf.domainmodel.Mass;
import org.xtext.urdf.domainmodel.Material;
import org.xtext.urdf.domainmodel.Mesh;
import org.xtext.urdf.domainmodel.Mimic;
import org.xtext.urdf.domainmodel.Origin;
import org.xtext.urdf.domainmodel.Robot;
import org.xtext.urdf.domainmodel.SafetyController;
import org.xtext.urdf.domainmodel.Sphere;
import org.xtext.urdf.domainmodel.Texture;
import org.xtext.urdf.domainmodel.Visual;
import org.xtext.urdf.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DomainmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DomainmodelPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case DomainmodelPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case DomainmodelPackage.CALLIBRATION:
				sequence_Callibration(context, (Callibration) semanticObject); 
				return; 
			case DomainmodelPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case DomainmodelPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case DomainmodelPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case DomainmodelPackage.DYNAMICS:
				sequence_Dynamics(context, (Dynamics) semanticObject); 
				return; 
			case DomainmodelPackage.GEOMETRY:
				sequence_Geometry_Impl(context, (Geometry) semanticObject); 
				return; 
			case DomainmodelPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case DomainmodelPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case DomainmodelPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case DomainmodelPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case DomainmodelPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case DomainmodelPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case DomainmodelPackage.MATERIAL:
				sequence_Material_Impl(context, (Material) semanticObject); 
				return; 
			case DomainmodelPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case DomainmodelPackage.MIMIC:
				sequence_Mimic(context, (Mimic) semanticObject); 
				return; 
			case DomainmodelPackage.ORIGIN:
				sequence_Origin(context, (Origin) semanticObject); 
				return; 
			case DomainmodelPackage.ROBOT:
				sequence_Robot(context, (Robot) semanticObject); 
				return; 
			case DomainmodelPackage.SAFETY_CONTROLLER:
				sequence_SafetyController(context, (SafetyController) semanticObject); 
				return; 
			case DomainmodelPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case DomainmodelPackage.TEXTURE:
				sequence_Texture(context, (Texture) semanticObject); 
				return; 
			case DomainmodelPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     (x=INT? y=INT? z=INT?)
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Box
	 *     Box returns Box
	 *
	 * Constraint:
	 *     {Box}
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Callibration returns Callibration
	 *
	 * Constraint:
	 *     (Rising=STRING? Falling=STRING?)
	 */
	protected void sequence_Callibration(ISerializationContext context, Callibration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (geometry=Geometry origin=Origin)
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.COLLISION__GEOMETRY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.COLLISION__GEOMETRY));
			if (transientValues.isValueTransient(semanticObject, DomainmodelPackage.Literals.COLLISION__ORIGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DomainmodelPackage.Literals.COLLISION__ORIGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCollisionAccess().getGeometryGeometryParserRuleCall_1_0(), semanticObject.getGeometry());
		feeder.accept(grammarAccess.getCollisionAccess().getOriginOriginParserRuleCall_3_0(), semanticObject.getOrigin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Color
	 *     Color returns Color
	 *
	 * Constraint:
	 *     {Color}
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Cylinder
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     {Cylinder}
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dynamics returns Dynamics
	 *
	 * Constraint:
	 *     (Friction=INT? Damping=INT?)
	 */
	protected void sequence_Dynamics(ISerializationContext context, Dynamics semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Geometry
	 *     Geometry_Impl returns Geometry
	 *
	 * Constraint:
	 *     {Geometry}
	 */
	protected void sequence_Geometry_Impl(ISerializationContext context, Geometry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     {Inertia}
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (origin=Origin (mass+=Mass mass+=Mass*)? (inertia+=Inertia inertia+=Inertia*)?)
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         Type=JointType? 
	 *         ChildOf+=[Link|STRING] 
	 *         ChildOf+=[Link|STRING]* 
	 *         ParentOf=[Link|STRING] 
	 *         limit=Limit? 
	 *         axis=Axis? 
	 *         origin=Origin 
	 *         callibration=Callibration? 
	 *         dynamics=Dynamics? 
	 *         mimic=Mimic? 
	 *         safetycontroller=SafetyController?
	 *     )
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (Lower=INT? Upper=INT? Effort=INT? Velocity=INT?)
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID (inertial+=Inertial inertial+=Inertial*)? (visuals+=Visual visuals+=Visual*)? (collision+=Collision collision+=Collision*)?)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     {Mass}
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Material
	 *     Material_Impl returns Material
	 *
	 * Constraint:
	 *     {Material}
	 */
	protected void sequence_Material_Impl(ISerializationContext context, Material semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Mesh
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     {Mesh}
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mimic returns Mimic
	 *
	 * Constraint:
	 *     (Joint=STRING? Multiplier=INT? OffSet=INT?)
	 */
	protected void sequence_Mimic(ISerializationContext context, Mimic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Origin returns Origin
	 *
	 * Constraint:
	 *     (
	 *         x=INT? 
	 *         y=INT? 
	 *         z=INT? 
	 *         Roll=INT? 
	 *         Pitch=INT? 
	 *         Yaw=INT?
	 *     )
	 */
	protected void sequence_Origin(ISerializationContext context, Origin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Robot returns Robot
	 *
	 * Constraint:
	 *     (name=STRING link+=Link link+=Link* (joint+=Joint joint+=Joint*)?)
	 */
	protected void sequence_Robot(ISerializationContext context, Robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SafetyController returns SafetyController
	 *
	 * Constraint:
	 *     (SoftLowerLimit=INT? SoftUpperLimit=INT? k_position=INT? k_velocity=INT?)
	 */
	protected void sequence_SafetyController(ISerializationContext context, SafetyController semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Geometry returns Sphere
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     {Sphere}
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Material returns Texture
	 *     Texture returns Texture
	 *
	 * Constraint:
	 *     {Texture}
	 */
	protected void sequence_Texture(ISerializationContext context, Texture semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (material=Material? origin=Origin geometry=Geometry)
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
