/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.domainmodel.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.urdf.domainmodel.Callibration;
import org.xtext.urdf.domainmodel.DomainmodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Callibration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.CallibrationImpl#getRising <em>Rising</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.CallibrationImpl#getFalling <em>Falling</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CallibrationImpl extends MinimalEObjectImpl.Container implements Callibration
{
  /**
   * The default value of the '{@link #getRising() <em>Rising</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRising()
   * @generated
   * @ordered
   */
  protected static final String RISING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRising() <em>Rising</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRising()
   * @generated
   * @ordered
   */
  protected String rising = RISING_EDEFAULT;

  /**
   * The default value of the '{@link #getFalling() <em>Falling</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalling()
   * @generated
   * @ordered
   */
  protected static final String FALLING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFalling() <em>Falling</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalling()
   * @generated
   * @ordered
   */
  protected String falling = FALLING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallibrationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.CALLIBRATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRising()
  {
    return rising;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRising(String newRising)
  {
    String oldRising = rising;
    rising = newRising;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.CALLIBRATION__RISING, oldRising, rising));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFalling()
  {
    return falling;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFalling(String newFalling)
  {
    String oldFalling = falling;
    falling = newFalling;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.CALLIBRATION__FALLING, oldFalling, falling));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.CALLIBRATION__RISING:
        return getRising();
      case DomainmodelPackage.CALLIBRATION__FALLING:
        return getFalling();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.CALLIBRATION__RISING:
        setRising((String)newValue);
        return;
      case DomainmodelPackage.CALLIBRATION__FALLING:
        setFalling((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.CALLIBRATION__RISING:
        setRising(RISING_EDEFAULT);
        return;
      case DomainmodelPackage.CALLIBRATION__FALLING:
        setFalling(FALLING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.CALLIBRATION__RISING:
        return RISING_EDEFAULT == null ? rising != null : !RISING_EDEFAULT.equals(rising);
      case DomainmodelPackage.CALLIBRATION__FALLING:
        return FALLING_EDEFAULT == null ? falling != null : !FALLING_EDEFAULT.equals(falling);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (Rising: ");
    result.append(rising);
    result.append(", Falling: ");
    result.append(falling);
    result.append(')');
    return result.toString();
  }

} //CallibrationImpl
