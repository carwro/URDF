/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.domainmodel.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.urdf.domainmodel.Axis;
import org.xtext.urdf.domainmodel.Callibration;
import org.xtext.urdf.domainmodel.DomainmodelPackage;
import org.xtext.urdf.domainmodel.Dynamics;
import org.xtext.urdf.domainmodel.Joint;
import org.xtext.urdf.domainmodel.JointType;
import org.xtext.urdf.domainmodel.Limit;
import org.xtext.urdf.domainmodel.Link;
import org.xtext.urdf.domainmodel.Mimic;
import org.xtext.urdf.domainmodel.Origin;
import org.xtext.urdf.domainmodel.SafetyController;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Joint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getChildOf <em>Child Of</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getParentOf <em>Parent Of</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getLimit <em>Limit</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getAxis <em>Axis</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getOrigin <em>Origin</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getCallibration <em>Callibration</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getDynamics <em>Dynamics</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getMimic <em>Mimic</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.JointImpl#getSafetycontroller <em>Safetycontroller</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JointImpl extends MinimalEObjectImpl.Container implements Joint
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final JointType TYPE_EDEFAULT = JointType.REVOLUTE;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected JointType type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildOf() <em>Child Of</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildOf()
   * @generated
   * @ordered
   */
  protected EList<Link> childOf;

  /**
   * The cached value of the '{@link #getParentOf() <em>Parent Of</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParentOf()
   * @generated
   * @ordered
   */
  protected Link parentOf;

  /**
   * The cached value of the '{@link #getLimit() <em>Limit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimit()
   * @generated
   * @ordered
   */
  protected Limit limit;

  /**
   * The cached value of the '{@link #getAxis() <em>Axis</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAxis()
   * @generated
   * @ordered
   */
  protected Axis axis;

  /**
   * The cached value of the '{@link #getOrigin() <em>Origin</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrigin()
   * @generated
   * @ordered
   */
  protected Origin origin;

  /**
   * The cached value of the '{@link #getCallibration() <em>Callibration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCallibration()
   * @generated
   * @ordered
   */
  protected Callibration callibration;

  /**
   * The cached value of the '{@link #getDynamics() <em>Dynamics</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDynamics()
   * @generated
   * @ordered
   */
  protected Dynamics dynamics;

  /**
   * The cached value of the '{@link #getMimic() <em>Mimic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMimic()
   * @generated
   * @ordered
   */
  protected Mimic mimic;

  /**
   * The cached value of the '{@link #getSafetycontroller() <em>Safetycontroller</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSafetycontroller()
   * @generated
   * @ordered
   */
  protected SafetyController safetycontroller;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JointImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.JOINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JointType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(JointType newType)
  {
    JointType oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Link> getChildOf()
  {
    if (childOf == null)
    {
      childOf = new EObjectResolvingEList<Link>(Link.class, this, DomainmodelPackage.JOINT__CHILD_OF);
    }
    return childOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Link getParentOf()
  {
    if (parentOf != null && parentOf.eIsProxy())
    {
      InternalEObject oldParentOf = (InternalEObject)parentOf;
      parentOf = (Link)eResolveProxy(oldParentOf);
      if (parentOf != oldParentOf)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DomainmodelPackage.JOINT__PARENT_OF, oldParentOf, parentOf));
      }
    }
    return parentOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Link basicGetParentOf()
  {
    return parentOf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentOf(Link newParentOf)
  {
    Link oldParentOf = parentOf;
    parentOf = newParentOf;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__PARENT_OF, oldParentOf, parentOf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Limit getLimit()
  {
    return limit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLimit(Limit newLimit, NotificationChain msgs)
  {
    Limit oldLimit = limit;
    limit = newLimit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__LIMIT, oldLimit, newLimit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLimit(Limit newLimit)
  {
    if (newLimit != limit)
    {
      NotificationChain msgs = null;
      if (limit != null)
        msgs = ((InternalEObject)limit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__LIMIT, null, msgs);
      if (newLimit != null)
        msgs = ((InternalEObject)newLimit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__LIMIT, null, msgs);
      msgs = basicSetLimit(newLimit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__LIMIT, newLimit, newLimit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Axis getAxis()
  {
    return axis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAxis(Axis newAxis, NotificationChain msgs)
  {
    Axis oldAxis = axis;
    axis = newAxis;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__AXIS, oldAxis, newAxis);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAxis(Axis newAxis)
  {
    if (newAxis != axis)
    {
      NotificationChain msgs = null;
      if (axis != null)
        msgs = ((InternalEObject)axis).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__AXIS, null, msgs);
      if (newAxis != null)
        msgs = ((InternalEObject)newAxis).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__AXIS, null, msgs);
      msgs = basicSetAxis(newAxis, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__AXIS, newAxis, newAxis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Origin getOrigin()
  {
    return origin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrigin(Origin newOrigin, NotificationChain msgs)
  {
    Origin oldOrigin = origin;
    origin = newOrigin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__ORIGIN, oldOrigin, newOrigin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrigin(Origin newOrigin)
  {
    if (newOrigin != origin)
    {
      NotificationChain msgs = null;
      if (origin != null)
        msgs = ((InternalEObject)origin).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__ORIGIN, null, msgs);
      if (newOrigin != null)
        msgs = ((InternalEObject)newOrigin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__ORIGIN, null, msgs);
      msgs = basicSetOrigin(newOrigin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__ORIGIN, newOrigin, newOrigin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Callibration getCallibration()
  {
    return callibration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCallibration(Callibration newCallibration, NotificationChain msgs)
  {
    Callibration oldCallibration = callibration;
    callibration = newCallibration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__CALLIBRATION, oldCallibration, newCallibration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCallibration(Callibration newCallibration)
  {
    if (newCallibration != callibration)
    {
      NotificationChain msgs = null;
      if (callibration != null)
        msgs = ((InternalEObject)callibration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__CALLIBRATION, null, msgs);
      if (newCallibration != null)
        msgs = ((InternalEObject)newCallibration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__CALLIBRATION, null, msgs);
      msgs = basicSetCallibration(newCallibration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__CALLIBRATION, newCallibration, newCallibration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dynamics getDynamics()
  {
    return dynamics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDynamics(Dynamics newDynamics, NotificationChain msgs)
  {
    Dynamics oldDynamics = dynamics;
    dynamics = newDynamics;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__DYNAMICS, oldDynamics, newDynamics);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDynamics(Dynamics newDynamics)
  {
    if (newDynamics != dynamics)
    {
      NotificationChain msgs = null;
      if (dynamics != null)
        msgs = ((InternalEObject)dynamics).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__DYNAMICS, null, msgs);
      if (newDynamics != null)
        msgs = ((InternalEObject)newDynamics).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__DYNAMICS, null, msgs);
      msgs = basicSetDynamics(newDynamics, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__DYNAMICS, newDynamics, newDynamics));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mimic getMimic()
  {
    return mimic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMimic(Mimic newMimic, NotificationChain msgs)
  {
    Mimic oldMimic = mimic;
    mimic = newMimic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__MIMIC, oldMimic, newMimic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMimic(Mimic newMimic)
  {
    if (newMimic != mimic)
    {
      NotificationChain msgs = null;
      if (mimic != null)
        msgs = ((InternalEObject)mimic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__MIMIC, null, msgs);
      if (newMimic != null)
        msgs = ((InternalEObject)newMimic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__MIMIC, null, msgs);
      msgs = basicSetMimic(newMimic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__MIMIC, newMimic, newMimic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SafetyController getSafetycontroller()
  {
    return safetycontroller;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSafetycontroller(SafetyController newSafetycontroller, NotificationChain msgs)
  {
    SafetyController oldSafetycontroller = safetycontroller;
    safetycontroller = newSafetycontroller;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__SAFETYCONTROLLER, oldSafetycontroller, newSafetycontroller);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSafetycontroller(SafetyController newSafetycontroller)
  {
    if (newSafetycontroller != safetycontroller)
    {
      NotificationChain msgs = null;
      if (safetycontroller != null)
        msgs = ((InternalEObject)safetycontroller).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__SAFETYCONTROLLER, null, msgs);
      if (newSafetycontroller != null)
        msgs = ((InternalEObject)newSafetycontroller).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DomainmodelPackage.JOINT__SAFETYCONTROLLER, null, msgs);
      msgs = basicSetSafetycontroller(newSafetycontroller, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.JOINT__SAFETYCONTROLLER, newSafetycontroller, newSafetycontroller));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DomainmodelPackage.JOINT__LIMIT:
        return basicSetLimit(null, msgs);
      case DomainmodelPackage.JOINT__AXIS:
        return basicSetAxis(null, msgs);
      case DomainmodelPackage.JOINT__ORIGIN:
        return basicSetOrigin(null, msgs);
      case DomainmodelPackage.JOINT__CALLIBRATION:
        return basicSetCallibration(null, msgs);
      case DomainmodelPackage.JOINT__DYNAMICS:
        return basicSetDynamics(null, msgs);
      case DomainmodelPackage.JOINT__MIMIC:
        return basicSetMimic(null, msgs);
      case DomainmodelPackage.JOINT__SAFETYCONTROLLER:
        return basicSetSafetycontroller(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.JOINT__TYPE:
        return getType();
      case DomainmodelPackage.JOINT__CHILD_OF:
        return getChildOf();
      case DomainmodelPackage.JOINT__PARENT_OF:
        if (resolve) return getParentOf();
        return basicGetParentOf();
      case DomainmodelPackage.JOINT__LIMIT:
        return getLimit();
      case DomainmodelPackage.JOINT__AXIS:
        return getAxis();
      case DomainmodelPackage.JOINT__ORIGIN:
        return getOrigin();
      case DomainmodelPackage.JOINT__CALLIBRATION:
        return getCallibration();
      case DomainmodelPackage.JOINT__DYNAMICS:
        return getDynamics();
      case DomainmodelPackage.JOINT__MIMIC:
        return getMimic();
      case DomainmodelPackage.JOINT__SAFETYCONTROLLER:
        return getSafetycontroller();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.JOINT__TYPE:
        setType((JointType)newValue);
        return;
      case DomainmodelPackage.JOINT__CHILD_OF:
        getChildOf().clear();
        getChildOf().addAll((Collection<? extends Link>)newValue);
        return;
      case DomainmodelPackage.JOINT__PARENT_OF:
        setParentOf((Link)newValue);
        return;
      case DomainmodelPackage.JOINT__LIMIT:
        setLimit((Limit)newValue);
        return;
      case DomainmodelPackage.JOINT__AXIS:
        setAxis((Axis)newValue);
        return;
      case DomainmodelPackage.JOINT__ORIGIN:
        setOrigin((Origin)newValue);
        return;
      case DomainmodelPackage.JOINT__CALLIBRATION:
        setCallibration((Callibration)newValue);
        return;
      case DomainmodelPackage.JOINT__DYNAMICS:
        setDynamics((Dynamics)newValue);
        return;
      case DomainmodelPackage.JOINT__MIMIC:
        setMimic((Mimic)newValue);
        return;
      case DomainmodelPackage.JOINT__SAFETYCONTROLLER:
        setSafetycontroller((SafetyController)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.JOINT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DomainmodelPackage.JOINT__CHILD_OF:
        getChildOf().clear();
        return;
      case DomainmodelPackage.JOINT__PARENT_OF:
        setParentOf((Link)null);
        return;
      case DomainmodelPackage.JOINT__LIMIT:
        setLimit((Limit)null);
        return;
      case DomainmodelPackage.JOINT__AXIS:
        setAxis((Axis)null);
        return;
      case DomainmodelPackage.JOINT__ORIGIN:
        setOrigin((Origin)null);
        return;
      case DomainmodelPackage.JOINT__CALLIBRATION:
        setCallibration((Callibration)null);
        return;
      case DomainmodelPackage.JOINT__DYNAMICS:
        setDynamics((Dynamics)null);
        return;
      case DomainmodelPackage.JOINT__MIMIC:
        setMimic((Mimic)null);
        return;
      case DomainmodelPackage.JOINT__SAFETYCONTROLLER:
        setSafetycontroller((SafetyController)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.JOINT__TYPE:
        return type != TYPE_EDEFAULT;
      case DomainmodelPackage.JOINT__CHILD_OF:
        return childOf != null && !childOf.isEmpty();
      case DomainmodelPackage.JOINT__PARENT_OF:
        return parentOf != null;
      case DomainmodelPackage.JOINT__LIMIT:
        return limit != null;
      case DomainmodelPackage.JOINT__AXIS:
        return axis != null;
      case DomainmodelPackage.JOINT__ORIGIN:
        return origin != null;
      case DomainmodelPackage.JOINT__CALLIBRATION:
        return callibration != null;
      case DomainmodelPackage.JOINT__DYNAMICS:
        return dynamics != null;
      case DomainmodelPackage.JOINT__MIMIC:
        return mimic != null;
      case DomainmodelPackage.JOINT__SAFETYCONTROLLER:
        return safetycontroller != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (Type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //JointImpl
