/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.domainmodel.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.urdf.domainmodel.DomainmodelPackage;
import org.xtext.urdf.domainmodel.Dynamics;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dynamics</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.DynamicsImpl#getFriction <em>Friction</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.DynamicsImpl#getDamping <em>Damping</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DynamicsImpl extends MinimalEObjectImpl.Container implements Dynamics
{
  /**
   * The default value of the '{@link #getFriction() <em>Friction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFriction()
   * @generated
   * @ordered
   */
  protected static final int FRICTION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getFriction() <em>Friction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFriction()
   * @generated
   * @ordered
   */
  protected int friction = FRICTION_EDEFAULT;

  /**
   * The default value of the '{@link #getDamping() <em>Damping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDamping()
   * @generated
   * @ordered
   */
  protected static final int DAMPING_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDamping() <em>Damping</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDamping()
   * @generated
   * @ordered
   */
  protected int damping = DAMPING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DynamicsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.DYNAMICS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getFriction()
  {
    return friction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFriction(int newFriction)
  {
    int oldFriction = friction;
    friction = newFriction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.DYNAMICS__FRICTION, oldFriction, friction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getDamping()
  {
    return damping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDamping(int newDamping)
  {
    int oldDamping = damping;
    damping = newDamping;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DomainmodelPackage.DYNAMICS__DAMPING, oldDamping, damping));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.DYNAMICS__FRICTION:
        return getFriction();
      case DomainmodelPackage.DYNAMICS__DAMPING:
        return getDamping();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.DYNAMICS__FRICTION:
        setFriction((Integer)newValue);
        return;
      case DomainmodelPackage.DYNAMICS__DAMPING:
        setDamping((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.DYNAMICS__FRICTION:
        setFriction(FRICTION_EDEFAULT);
        return;
      case DomainmodelPackage.DYNAMICS__DAMPING:
        setDamping(DAMPING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.DYNAMICS__FRICTION:
        return friction != FRICTION_EDEFAULT;
      case DomainmodelPackage.DYNAMICS__DAMPING:
        return damping != DAMPING_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (Friction: ");
    result.append(friction);
    result.append(", Damping: ");
    result.append(damping);
    result.append(')');
    return result.toString();
  }

} //DynamicsImpl
