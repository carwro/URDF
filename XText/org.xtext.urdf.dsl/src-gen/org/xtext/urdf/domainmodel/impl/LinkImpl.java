/**
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.domainmodel.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.urdf.domainmodel.Collision;
import org.xtext.urdf.domainmodel.DomainmodelPackage;
import org.xtext.urdf.domainmodel.Inertial;
import org.xtext.urdf.domainmodel.Link;
import org.xtext.urdf.domainmodel.Visual;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.LinkImpl#getInertial <em>Inertial</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.LinkImpl#getVisuals <em>Visuals</em>}</li>
 *   <li>{@link org.xtext.urdf.domainmodel.impl.LinkImpl#getCollision <em>Collision</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LinkImpl extends MinimalEObjectImpl.Container implements Link
{
  /**
   * The cached value of the '{@link #getInertial() <em>Inertial</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInertial()
   * @generated
   * @ordered
   */
  protected EList<Inertial> inertial;

  /**
   * The cached value of the '{@link #getVisuals() <em>Visuals</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisuals()
   * @generated
   * @ordered
   */
  protected EList<Visual> visuals;

  /**
   * The cached value of the '{@link #getCollision() <em>Collision</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollision()
   * @generated
   * @ordered
   */
  protected EList<Collision> collision;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.LINK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Inertial> getInertial()
  {
    if (inertial == null)
    {
      inertial = new EObjectContainmentEList<Inertial>(Inertial.class, this, DomainmodelPackage.LINK__INERTIAL);
    }
    return inertial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Visual> getVisuals()
  {
    if (visuals == null)
    {
      visuals = new EObjectContainmentEList<Visual>(Visual.class, this, DomainmodelPackage.LINK__VISUALS);
    }
    return visuals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Collision> getCollision()
  {
    if (collision == null)
    {
      collision = new EObjectContainmentEList<Collision>(Collision.class, this, DomainmodelPackage.LINK__COLLISION);
    }
    return collision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DomainmodelPackage.LINK__INERTIAL:
        return ((InternalEList<?>)getInertial()).basicRemove(otherEnd, msgs);
      case DomainmodelPackage.LINK__VISUALS:
        return ((InternalEList<?>)getVisuals()).basicRemove(otherEnd, msgs);
      case DomainmodelPackage.LINK__COLLISION:
        return ((InternalEList<?>)getCollision()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DomainmodelPackage.LINK__INERTIAL:
        return getInertial();
      case DomainmodelPackage.LINK__VISUALS:
        return getVisuals();
      case DomainmodelPackage.LINK__COLLISION:
        return getCollision();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DomainmodelPackage.LINK__INERTIAL:
        getInertial().clear();
        getInertial().addAll((Collection<? extends Inertial>)newValue);
        return;
      case DomainmodelPackage.LINK__VISUALS:
        getVisuals().clear();
        getVisuals().addAll((Collection<? extends Visual>)newValue);
        return;
      case DomainmodelPackage.LINK__COLLISION:
        getCollision().clear();
        getCollision().addAll((Collection<? extends Collision>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.LINK__INERTIAL:
        getInertial().clear();
        return;
      case DomainmodelPackage.LINK__VISUALS:
        getVisuals().clear();
        return;
      case DomainmodelPackage.LINK__COLLISION:
        getCollision().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DomainmodelPackage.LINK__INERTIAL:
        return inertial != null && !inertial.isEmpty();
      case DomainmodelPackage.LINK__VISUALS:
        return visuals != null && !visuals.isEmpty();
      case DomainmodelPackage.LINK__COLLISION:
        return collision != null && !collision.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //LinkImpl
