/*
 * generated by Xtext 2.10.0
 */
package org.xtext.urdf.validation

import org.eclipse.xtext.validation.Check
import uRDF.Limit
import uRDF.Robot
import uRDF.URDFPackage
import uRDF.ReUseAble

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DslValidator extends AbstractDslValidator {
	

	@Check
	def checkURDFComplete(Robot robot)
	{
		//robotContainsLink(robot)
		
		checkJointTypesHaveRequiredLimitOrAxis(robot)
//		if(!checkJointParentChildRelations(robot))
//		{
//			error("Parent child problem", URDFPackage.Literals.ROBOT__JOINT)
//		} else {
//			info("Robot is valid",URDFPackage.Literals.ROBOT__LINK);
//		}
		
	}
	
	//maybe this check should be integrated in the ancestor validation... 
	def checkJointParentChildRelations (Robot robot) {
      robot.getJoint.forall[j | j.getParentOf != j.getChildOf]
    }
    
	def checkRobotContainsLink(Robot robot) {
		robot.link.length > 0
	}
	
	def checkJointTypesHaveRequiredLimitOrAxis(Robot robot) {
		robot.joint.filter[j | j.type.getName.equals("revolute") || j.type.getName.equals("prismatic")].forall[j | j.limit != null && j.axis != null]
	}
	
	
//	def checkJointTypesHaveRequiredLimit(Robot robot) {
//		robot.joint.filter[j | j.type.equals("Revolute") || j.type.equals("Prismatic")].forall[j | j.eContents.exists[x | x.class.equals(Limit)]]
//	}
	
	@Check
	def checkLinkIsConnectedToAnyJoint(Robot robot) {
		//Er name nødv - og kan man gøre det fra Link kontekst...
		if(!robot.link.forall[l |  
			robot.joint.map[parentOf.name].contains(l.name) || 
			robot.joint.map[childOf.name].contains(l.name)
		]) 
		error("Link has to be referenced as parentOf or childOf to at least one Joint", 
        		URDFPackage.Literals.ROBOT__LINK)
	}
	
	@Check
	//CANNOT BE TESTED BEFORE IMPLEMENTATION OF REUSE!!
	def onlyPossibleToReuseIfNot(ReUseAble reuser) {
		if(reuser.isReuseOf.isReuseOf != null) 
			error("Not legal to reuse from instance, that is already made from reuse!", 
        		URDFPackage.Literals.NAMED_ELEMENT__NAME)
	}	
	
	@Check
	//CANNOT BE TESTED BEFORE IMPLEMENTATION OF REUSE!! 
	def onlyPossibleToReuseIfSameType(ReUseAble reuser) {
		if(reuser.eClass != reuser.isReuseOf.eClass) 
			error("Not legal to reuse from instance, that is already made from reuse!", 
        		URDFPackage.Literals.NAMED_ELEMENT__NAME)
	}	
	
	
	//@Check
	//Almost done but how to get list of attr values from axis?
	/*def checkAxisVectorHasValidSettingWithOnlyOneTrue(Axis axis) {
		//if(axis.eClass.EStructuralFeatures.fold(0, [ x , y | x + y ]) != 1)
		//error("Only one axis may be set to 1 (= active). The other two axis must be set to 0.", 
        		//URDFPackage.Literals.NAMED_ELEMENT__NAME)
		
	}*/	
	
}