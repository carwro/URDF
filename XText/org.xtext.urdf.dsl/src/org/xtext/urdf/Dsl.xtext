
grammar org.xtext.urdf.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/uRDF" as uRDF

/*
 * Todo: 
 * Expressions - inline for value assignment 
 * Add Constant to parser rules: Should be alternative in all numeric expr - and for ID with String value  
 * Topology of Link and Joint: How to specify?
 * Add reflect as alternative in relevant places...
 * Add reuse grammar with reference to reused entity (mydot example from christian not working!)
 * Create ValueConverter (and possibly other stuff to parse reflect as negation of reused)
 * Create ValueConverter to convert scale values to Box
 * DONE: Create Constants datatype - signed numeric or string (incl concatenation with String)
 * DONE: Change interface to abstract class in metamodel
 * DONE: ReUse - add reference in the metamodel
 * DONE: Origin required should possibly be adjusted in metamodel?
 * DONE: Scientific notation - how to implement?
 * DONE: Origin xyz/rpy values + axis values - vector and single defs. Kill one of the definitions?
 * DONE: Origin values should be ('-')? INT or FLOAT or SCIENTIFIC - get SIGNED_NUMERIC class from metamodel...
 */

Robot returns uRDF::Robot:
	'Robot' name=ID
	(link+=Link | joint+=Joint)* 
;

Material returns uRDF::Material:
	Color | Texture;

Geometry returns uRDF::Geometry:
	Box | Cylinder | Mesh | Sphere;
		

Link returns uRDF::Link:
	'Link' name=ID
	//alle visuals skal defineres in order - ok?
	visuals+=Visual*
	inertial+=Inertial*
	collision+=Collision*
;

Joint returns uRDF::Joint:
	'Joint' name=ID
  	'Type' Type=JointType
	'ChildOf' ChildOf=[uRDF::Link|ID]
	'ParentOf' ParentOf=[uRDF::Link|ID]
	('Limit' limit=Limit)?
	('Axis' axis=Axis)?
	(origin=Origin)?
	('Calibration' calibration=Calibration)?
	('Dynamics' dynamics=Dynamics)?
	('Mimic' mimic=Mimic)?
	('SafetyController' safetycontroller=SafetyController)?
;

Inertial returns uRDF::Inertial:
	'Inertial' (name=ID)?
	inertia=Inertia
	mass=Mass
	(origin=Origin)?
		
;

Visual returns uRDF::Visual:
	'Visual'(name=ID)? 
	'Geometry' geometry=Geometry
	(origin=Origin)?
	('Material' material=Material)?
		
;

Collision returns uRDF::Collision:
	'Collision' name=ID
	'Geometry' geometry=Geometry
	(origin=Origin)?
;

Origin returns uRDF::Origin:
	 'Origin' (name=ID)?
	 	'xyz' x=SIGNED_NUMERIC y=SIGNED_NUMERIC z=SIGNED_NUMERIC 
		('roll_pitch_yaw' roll=SIGNED_NUMERIC pitch=SIGNED_NUMERIC yaw=SIGNED_NUMERIC)? 
;

Mass returns uRDF::Mass:
	'Mass' (name=ID)?
	'massValueInKilograms' massValueInKilograms=FLOAT
	;

Inertia returns uRDF::Inertia:
	'Inertia' (name=ID)?
	'ixx' ixx=SIGNED_NUMERIC 'ixy' ixy=SIGNED_NUMERIC 'ixz' ixz=SIGNED_NUMERIC 'iyy' iyy=SIGNED_NUMERIC 'iyz' iyz=SIGNED_NUMERIC 'izz' izz=SIGNED_NUMERIC
	;


Color returns uRDF::Color:
	/* RGBA values must be floats between 0 and 1 incl */
	'Color' (name=ID)?
		'red_green_blue_alpha' red=FLOAT green=FLOAT blue=FLOAT alpha=FLOAT	
	;

Texture returns uRDF::Texture:
	'Texture' (name=ID)?
	'pathToFile' pathToFile=STRING
	;

Box returns uRDF::Box:
	'Box' (name=ID)?
	//Tjek spec: order listing of dimensions?
	'height_length_width' height=MEASURE length=MEASURE width=MEASURE 
;

Cylinder returns uRDF::Cylinder:
	'Cylinder' (name=ID)?
	'radius' radius=MEASURE
	'length' length=MEASURE	
	;

Mesh returns uRDF::Mesh:
	'Mesh' (name=ID)?
	'pathToFile' pathToFile=STRING
	//TODO: create ValueConverter to convert scale to Box
	('scale' box=[uRDF::Box|STRING])?
	;

Sphere returns uRDF::Sphere:
	'Sphere' (name=ID)?
	'radius' radius=MEASURE	
	;

enum JointType returns uRDF::JointType:
		fixed = 'Fixed' | revolute = 'Revolute' |  prismatic = 'Prismatic' | continuous = 'Continuous' ;

Limit returns uRDF::Limit:
	(name=ID)?
		 'effort' effort=SIGNED_NUMERIC 
		 'velocity' velocity=SIGNED_NUMERIC 
		 'lower' lower=(SIGNED_NUMERIC)?
		 'upper' upper=(SIGNED_NUMERIC)? 
;

Axis returns uRDF::Axis:
	/* Binary values - must be 0 or 1. Digitsum must be 1*/
	(name=ID)?
	    //keyword aliases: 'xyz' or 'x', 'y', 'z'
		'xyz' x=AXIS_VALUE y=AXIS_VALUE z=AXIS_VALUE 
;

Calibration returns uRDF::Calibration:
	//{uRDF::Calibration} is necessary because all content is optional - type may not be init, so we need to force it (Bettini)
	{uRDF::Calibration}(name=ID)?
	 	('rising' rising=SIGNED_NUMERIC)? 
	 	('falling' falling=SIGNED_NUMERIC)? 
;

Dynamics returns uRDF::Dynamics:
	//{uRDF::Dynamics} is necessary because all content is optional - type may not be init, so we need to force it (Bettini)
	{uRDF::Dynamics}(name=ID)?
		('friction' friction=SIGNED_NUMERIC)?
		('damping' damping=SIGNED_NUMERIC)?
;

Mimic returns uRDF::Mimic:
	(name=ID)?
	    'mimics' mimics=[uRDF::Joint|ID]
		('multiplier' multiplier=SIGNED_NUMERIC)?
		('offSet' offSet=SIGNED_NUMERIC)?
;

SafetyController returns uRDF::SafetyController:
	(name=ID)?
		('softLowerLimit' softLowerLimit=SIGNED_NUMERIC)?
		('softUpperLimit' softUpperLimit=SIGNED_NUMERIC)?
		('k_position' k_position=SIGNED_NUMERIC)?
		'k_velocity' k_velocity=SIGNED_NUMERIC
;

//datatypes...

//skal vi droppe at Const kan indeholde STRING?
ConstantImpl returns uRDF::Constant:
	{uRDF::Constant} name=ID 
	SIGNED_NUMERIC | STRING
; 

FLOAT returns ecore::EFloat: 
	INT '.' INT
;

SCIENTIFIC returns ecore::EBigDecimal:
	FLOAT 'e' ('+' | '-')? INT 
;

/*SCIENTIFIC returns ecore::EBigDecimal:
    (INT ('.' (INT)?)? | '.' INT)
    (('e' | 'E') ('+' | '-')? INT)?;*/

SIGNED_NUMERIC:
	('-')? (INT | FLOAT | SCIENTIFIC)
;

MEASURE:
	INT | FLOAT
;
 
terminal AXIS_VALUE returns ecore::EInt: 
	('0'..'1');

REFLECT:
'reflect'	
;


NL:
	('\n' | '\r')+
;

