
grammar org.xtext.urdf.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.example.org/uRDF" as uRDF






/*
 * Todo: 
 * Expressions 
 * Defaults
 * ReUse
 * Constants
 * x y z values - how to specify
 */



Robot returns uRDF::Robot:
		'RobotName' name=ID
		 link+=Link+  
		 joint+=Joint* 
;

Material returns uRDF::Material:
	Color | Texture;

Geometry returns uRDF::Geometry:
	Box | Cylinder | Mesh | Sphere;

Link returns uRDF::Link:
	{uRDF::Link}
		'Link' name=ID
		inertial+=Inertial*
		visuals+=Visual*
		collision+=Collision*
;

Joint returns uRDF::Joint:
		'Joint' name=ID
		Type=JointType
		 ChildOf=[uRDF::Link|STRING]
		 ParentOf=[uRDF::Link|STRING]
		(limit=Limit)?
		(axis=Axis)?
		 origin=Origin
		(calibration=Calibration)?
		(dynamics=Dynamics)?
		(mimic=Mimic)?
		(safetycontroller=SafetyController)?
;

Inertial returns uRDF::Inertial:
		name=ID
		origin=Origin
		mass=Mass
		inertia=Inertia
;

Visual returns uRDF::Visual:
		name=ID
		(material=Material)?
		origin=Origin
		geometry=Geometry
;

Collision returns uRDF::Collision:
		name=ID
		geometry=Geometry
		origin=Origin
;

Origin returns uRDF::Origin:
	 'Origin'
	 name=ID
	 	
	 	('x' x=FLOAT)?
		('y' y=FLOAT)?
		('z' z=FLOAT)?
		('roll' roll=FLOAT)?
		('pitch' pitch=FLOAT)?
		('yaw' yaw=FLOAT)?
	 
;

Mass returns uRDF::Mass:
	name=ID
	'Mass'
	'massValueInKilograms' massValueInKilograms=FLOAT
	;

Inertia returns uRDF::Inertia:
	name=ID
	'Inertia'
	'ixx' ixx=FLOAT
	'ixy' ixy=FLOAT
	'ixz' ixz=FLOAT
	'iyy' iyy=FLOAT
	'iyz' iyz=FLOAT
	'izz' izz=FLOAT
	;


Color returns uRDF::Color:
	/* RGBA values between 0 and 1 */
	name=ID
	'Color'
		('red' red=FLOAT)?
		('green' green=FLOAT)?
		('blue' blue=FLOAT)?
		('alpha' alpha=FLOAT)?	
	;

Texture returns uRDF::Texture:
	name=ID
	'Texture'
	('pathToFile' pathToFile=STRING)?
	;

Box returns uRDF::Box:
	name=ID
	'Box'
	('height' height=FLOAT)?
	('length' length=FLOAT)?
	('width' width=FLOAT)?	
	;

Cylinder returns uRDF::Cylinder:
	name=ID
	'Cylinder'
	('radius' radius=FLOAT)?
	('length' length=FLOAT)?	
	;

Mesh returns uRDF::Mesh:
	name=ID
	'Mesh'
	('pathToFile' pathToFile=STRING)?
	('box' box=[uRDF::Box|STRING])?
	;

Sphere returns uRDF::Sphere:
	name=ID
	'Sphere'
	('radius' radius=FLOAT)?	
	;

enum JointType returns uRDF::JointType:
				revolute = 'Revolute' | continous = 'Continous' | fixed = 'Fixed' | prismatic = 'Prismatic';

Limit returns uRDF::Limit:
	name=ID
	 'Limit'
		 'lower' lower=FLOAT
		 'upper' upper=FLOAT 
		 'effort' effort=FLOAT 
		 'velocity' velocity=FLOAT 
;

Axis returns uRDF::Axis:
	/* Binary values */
	name=ID
		'Axis'
		'x' x=INT
		'y' y=INT
		'z' z=INT
;

Calibration returns uRDF::Calibration:
	name=ID
	 'Calibration'
	 	('rising' rising=FLOAT)? 
	 	('falling' falling=FLOAT)? 
;

Dynamics returns uRDF::Dynamics:
	name=ID
		'Dynamics'
		('friction' friction=FLOAT)?
		('damping' damping=FLOAT)?
;

Mimic returns uRDF::Mimic:
	name=ID
		'Mimic'
		('multiplier' multiplier=FLOAT)?
		('offSet' offSet=FLOAT)?
		('mimics' mimics=[uRDF::Joint|STRING])?
;

SafetyController returns uRDF::SafetyController:
	name=ID
		'SafetyController'
		('softLowerLimit' softLowerLimit=FLOAT)?
		('softUpperLimit' softUpperLimit=FLOAT)?
		('k_position' k_position=FLOAT)?
		('k_velocity' k_velocity=FLOAT)?
;

FLOAT returns ecore::EFloat: 
	INT '.' INT
;

REFLECT:
'reflect'	
;


NL:
	('\n' | '\r')+
;

