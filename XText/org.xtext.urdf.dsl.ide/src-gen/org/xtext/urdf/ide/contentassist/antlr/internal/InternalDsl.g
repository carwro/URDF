/*
 * generated by Xtext 2.10.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.urdf.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.urdf.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.urdf.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRobot
entryRuleRobot
:
{ before(grammarAccess.getRobotRule()); }
	 ruleRobot
{ after(grammarAccess.getRobotRule()); } 
	 EOF 
;

// Rule Robot
ruleRobot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRobotAccess().getGroup()); }
		(rule__Robot__Group__0)
		{ after(grammarAccess.getRobotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaterial
entryRuleMaterial
:
{ before(grammarAccess.getMaterialRule()); }
	 ruleMaterial
{ after(grammarAccess.getMaterialRule()); } 
	 EOF 
;

// Rule Material
ruleMaterial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaterialAccess().getAlternatives()); }
		(rule__Material__Alternatives)
		{ after(grammarAccess.getMaterialAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeometry
entryRuleGeometry
:
{ before(grammarAccess.getGeometryRule()); }
	 ruleGeometry
{ after(grammarAccess.getGeometryRule()); } 
	 EOF 
;

// Rule Geometry
ruleGeometry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeometryAccess().getAlternatives()); }
		(rule__Geometry__Alternatives)
		{ after(grammarAccess.getGeometryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLink
entryRuleLink
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinkAccess().getGroup()); }
		(rule__Link__Group__0)
		{ after(grammarAccess.getLinkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJoint
entryRuleJoint
:
{ before(grammarAccess.getJointRule()); }
	 ruleJoint
{ after(grammarAccess.getJointRule()); } 
	 EOF 
;

// Rule Joint
ruleJoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJointAccess().getGroup()); }
		(rule__Joint__Group__0)
		{ after(grammarAccess.getJointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInertial
entryRuleInertial
:
{ before(grammarAccess.getInertialRule()); }
	 ruleInertial
{ after(grammarAccess.getInertialRule()); } 
	 EOF 
;

// Rule Inertial
ruleInertial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInertialAccess().getGroup()); }
		(rule__Inertial__Group__0)
		{ after(grammarAccess.getInertialAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVisual
entryRuleVisual
:
{ before(grammarAccess.getVisualRule()); }
	 ruleVisual
{ after(grammarAccess.getVisualRule()); } 
	 EOF 
;

// Rule Visual
ruleVisual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVisualAccess().getGroup()); }
		(rule__Visual__Group__0)
		{ after(grammarAccess.getVisualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollision
entryRuleCollision
:
{ before(grammarAccess.getCollisionRule()); }
	 ruleCollision
{ after(grammarAccess.getCollisionRule()); } 
	 EOF 
;

// Rule Collision
ruleCollision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollisionAccess().getGroup()); }
		(rule__Collision__Group__0)
		{ after(grammarAccess.getCollisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrigin
entryRuleOrigin
:
{ before(grammarAccess.getOriginRule()); }
	 ruleOrigin
{ after(grammarAccess.getOriginRule()); } 
	 EOF 
;

// Rule Origin
ruleOrigin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOriginAccess().getGroup()); }
		(rule__Origin__Group__0)
		{ after(grammarAccess.getOriginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMass
entryRuleMass
:
{ before(grammarAccess.getMassRule()); }
	 ruleMass
{ after(grammarAccess.getMassRule()); } 
	 EOF 
;

// Rule Mass
ruleMass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMassAccess().getGroup()); }
		(rule__Mass__Group__0)
		{ after(grammarAccess.getMassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInertia
entryRuleInertia
:
{ before(grammarAccess.getInertiaRule()); }
	 ruleInertia
{ after(grammarAccess.getInertiaRule()); } 
	 EOF 
;

// Rule Inertia
ruleInertia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInertiaAccess().getGroup()); }
		(rule__Inertia__Group__0)
		{ after(grammarAccess.getInertiaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColor
entryRuleColor
:
{ before(grammarAccess.getColorRule()); }
	 ruleColor
{ after(grammarAccess.getColorRule()); } 
	 EOF 
;

// Rule Color
ruleColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorAccess().getGroup()); }
		(rule__Color__Group__0)
		{ after(grammarAccess.getColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTexture
entryRuleTexture
:
{ before(grammarAccess.getTextureRule()); }
	 ruleTexture
{ after(grammarAccess.getTextureRule()); } 
	 EOF 
;

// Rule Texture
ruleTexture 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextureAccess().getGroup()); }
		(rule__Texture__Group__0)
		{ after(grammarAccess.getTextureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBox
entryRuleBox
:
{ before(grammarAccess.getBoxRule()); }
	 ruleBox
{ after(grammarAccess.getBoxRule()); } 
	 EOF 
;

// Rule Box
ruleBox 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoxAccess().getGroup()); }
		(rule__Box__Group__0)
		{ after(grammarAccess.getBoxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCylinder
entryRuleCylinder
:
{ before(grammarAccess.getCylinderRule()); }
	 ruleCylinder
{ after(grammarAccess.getCylinderRule()); } 
	 EOF 
;

// Rule Cylinder
ruleCylinder 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCylinderAccess().getGroup()); }
		(rule__Cylinder__Group__0)
		{ after(grammarAccess.getCylinderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMesh
entryRuleMesh
:
{ before(grammarAccess.getMeshRule()); }
	 ruleMesh
{ after(grammarAccess.getMeshRule()); } 
	 EOF 
;

// Rule Mesh
ruleMesh 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeshAccess().getGroup()); }
		(rule__Mesh__Group__0)
		{ after(grammarAccess.getMeshAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSphere
entryRuleSphere
:
{ before(grammarAccess.getSphereRule()); }
	 ruleSphere
{ after(grammarAccess.getSphereRule()); } 
	 EOF 
;

// Rule Sphere
ruleSphere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSphereAccess().getGroup()); }
		(rule__Sphere__Group__0)
		{ after(grammarAccess.getSphereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLimit
entryRuleLimit
:
{ before(grammarAccess.getLimitRule()); }
	 ruleLimit
{ after(grammarAccess.getLimitRule()); } 
	 EOF 
;

// Rule Limit
ruleLimit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLimitAccess().getGroup()); }
		(rule__Limit__Group__0)
		{ after(grammarAccess.getLimitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAxis
entryRuleAxis
:
{ before(grammarAccess.getAxisRule()); }
	 ruleAxis
{ after(grammarAccess.getAxisRule()); } 
	 EOF 
;

// Rule Axis
ruleAxis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAxisAccess().getGroup()); }
		(rule__Axis__Group__0)
		{ after(grammarAccess.getAxisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalibration
entryRuleCalibration
:
{ before(grammarAccess.getCalibrationRule()); }
	 ruleCalibration
{ after(grammarAccess.getCalibrationRule()); } 
	 EOF 
;

// Rule Calibration
ruleCalibration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalibrationAccess().getGroup()); }
		(rule__Calibration__Group__0)
		{ after(grammarAccess.getCalibrationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDynamics
entryRuleDynamics
:
{ before(grammarAccess.getDynamicsRule()); }
	 ruleDynamics
{ after(grammarAccess.getDynamicsRule()); } 
	 EOF 
;

// Rule Dynamics
ruleDynamics 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDynamicsAccess().getGroup()); }
		(rule__Dynamics__Group__0)
		{ after(grammarAccess.getDynamicsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMimic
entryRuleMimic
:
{ before(grammarAccess.getMimicRule()); }
	 ruleMimic
{ after(grammarAccess.getMimicRule()); } 
	 EOF 
;

// Rule Mimic
ruleMimic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMimicAccess().getGroup()); }
		(rule__Mimic__Group__0)
		{ after(grammarAccess.getMimicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSafetyController
entryRuleSafetyController
:
{ before(grammarAccess.getSafetyControllerRule()); }
	 ruleSafetyController
{ after(grammarAccess.getSafetyControllerRule()); } 
	 EOF 
;

// Rule SafetyController
ruleSafetyController 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSafetyControllerAccess().getGroup()); }
		(rule__SafetyController__Group__0)
		{ after(grammarAccess.getSafetyControllerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule JointType
ruleJointType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointTypeAccess().getAlternatives()); }
		(rule__JointType__Alternatives)
		{ after(grammarAccess.getJointTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Material__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaterialAccess().getColorParserRuleCall_0()); }
		ruleColor
		{ after(grammarAccess.getMaterialAccess().getColorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMaterialAccess().getTextureParserRuleCall_1()); }
		ruleTexture
		{ after(grammarAccess.getMaterialAccess().getTextureParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getBoxParserRuleCall_0()); }
		ruleBox
		{ after(grammarAccess.getGeometryAccess().getBoxParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getCylinderParserRuleCall_1()); }
		ruleCylinder
		{ after(grammarAccess.getGeometryAccess().getCylinderParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getMeshParserRuleCall_2()); }
		ruleMesh
		{ after(grammarAccess.getGeometryAccess().getMeshParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getSphereParserRuleCall_3()); }
		ruleSphere
		{ after(grammarAccess.getGeometryAccess().getSphereParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JointType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_0()); }
		('Revolute')
		{ after(grammarAccess.getJointTypeAccess().getRevoluteEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getJointTypeAccess().getContinousEnumLiteralDeclaration_1()); }
		('Continous')
		{ after(grammarAccess.getJointTypeAccess().getContinousEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_2()); }
		('Fixed')
		{ after(grammarAccess.getJointTypeAccess().getFixedEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_3()); }
		('Prismatic')
		{ after(grammarAccess.getJointTypeAccess().getPrismaticEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__0__Impl
	rule__Robot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getRobotNameKeyword_0()); }
	'RobotName'
	{ after(grammarAccess.getRobotAccess().getRobotNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__1__Impl
	rule__Robot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getNameAssignment_1()); }
	(rule__Robot__NameAssignment_1)
	{ after(grammarAccess.getRobotAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__2__Impl
	rule__Robot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRobotAccess().getLinkAssignment_2()); }
		(rule__Robot__LinkAssignment_2)
		{ after(grammarAccess.getRobotAccess().getLinkAssignment_2()); }
	)
	(
		{ before(grammarAccess.getRobotAccess().getLinkAssignment_2()); }
		(rule__Robot__LinkAssignment_2)*
		{ after(grammarAccess.getRobotAccess().getLinkAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Robot__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRobotAccess().getJointAssignment_3()); }
	(rule__Robot__JointAssignment_3)*
	{ after(grammarAccess.getRobotAccess().getJointAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkAction_0()); }
	()
	{ after(grammarAccess.getLinkAccess().getLinkAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__1__Impl
	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkKeyword_1()); }
	'Link'
	{ after(grammarAccess.getLinkAccess().getLinkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__2__Impl
	rule__Link__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getNameAssignment_2()); }
	(rule__Link__NameAssignment_2)
	{ after(grammarAccess.getLinkAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__3__Impl
	rule__Link__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getInertialAssignment_3()); }
	(rule__Link__InertialAssignment_3)*
	{ after(grammarAccess.getLinkAccess().getInertialAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__4__Impl
	rule__Link__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getVisualsAssignment_4()); }
	(rule__Link__VisualsAssignment_4)*
	{ after(grammarAccess.getLinkAccess().getVisualsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getCollisionAssignment_5()); }
	(rule__Link__CollisionAssignment_5)*
	{ after(grammarAccess.getLinkAccess().getCollisionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Joint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__0__Impl
	rule__Joint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getJointKeyword_0()); }
	'Joint'
	{ after(grammarAccess.getJointAccess().getJointKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__1__Impl
	rule__Joint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getNameAssignment_1()); }
	(rule__Joint__NameAssignment_1)
	{ after(grammarAccess.getJointAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__2__Impl
	rule__Joint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getTypeAssignment_2()); }
	(rule__Joint__TypeAssignment_2)
	{ after(grammarAccess.getJointAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__3__Impl
	rule__Joint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getChildOfAssignment_3()); }
	(rule__Joint__ChildOfAssignment_3)
	{ after(grammarAccess.getJointAccess().getChildOfAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__4__Impl
	rule__Joint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getParentOfAssignment_4()); }
	(rule__Joint__ParentOfAssignment_4)
	{ after(grammarAccess.getJointAccess().getParentOfAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__5__Impl
	rule__Joint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getLimitAssignment_5()); }
	(rule__Joint__LimitAssignment_5)?
	{ after(grammarAccess.getJointAccess().getLimitAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__6__Impl
	rule__Joint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getAxisAssignment_6()); }
	(rule__Joint__AxisAssignment_6)?
	{ after(grammarAccess.getJointAccess().getAxisAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__7__Impl
	rule__Joint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getOriginAssignment_7()); }
	(rule__Joint__OriginAssignment_7)
	{ after(grammarAccess.getJointAccess().getOriginAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__8__Impl
	rule__Joint__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getCalibrationAssignment_8()); }
	(rule__Joint__CalibrationAssignment_8)?
	{ after(grammarAccess.getJointAccess().getCalibrationAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__9__Impl
	rule__Joint__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getDynamicsAssignment_9()); }
	(rule__Joint__DynamicsAssignment_9)?
	{ after(grammarAccess.getJointAccess().getDynamicsAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__10__Impl
	rule__Joint__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getMimicAssignment_10()); }
	(rule__Joint__MimicAssignment_10)?
	{ after(grammarAccess.getJointAccess().getMimicAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getSafetycontrollerAssignment_11()); }
	(rule__Joint__SafetycontrollerAssignment_11)?
	{ after(grammarAccess.getJointAccess().getSafetycontrollerAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Inertial__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inertial__Group__0__Impl
	rule__Inertial__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInertialAccess().getOriginAssignment_0()); }
	(rule__Inertial__OriginAssignment_0)
	{ after(grammarAccess.getInertialAccess().getOriginAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inertial__Group__1__Impl
	rule__Inertial__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInertialAccess().getMassAssignment_1()); }
	(rule__Inertial__MassAssignment_1)
	{ after(grammarAccess.getInertialAccess().getMassAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inertial__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInertialAccess().getInertiaAssignment_2()); }
	(rule__Inertial__InertiaAssignment_2)
	{ after(grammarAccess.getInertialAccess().getInertiaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Visual__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual__Group__0__Impl
	rule__Visual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisualAccess().getMaterialAssignment_0()); }
	(rule__Visual__MaterialAssignment_0)?
	{ after(grammarAccess.getVisualAccess().getMaterialAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual__Group__1__Impl
	rule__Visual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisualAccess().getOriginAssignment_1()); }
	(rule__Visual__OriginAssignment_1)
	{ after(grammarAccess.getVisualAccess().getOriginAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisualAccess().getGeometryAssignment_2()); }
	(rule__Visual__GeometryAssignment_2)
	{ after(grammarAccess.getVisualAccess().getGeometryAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Collision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collision__Group__0__Impl
	rule__Collision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Collision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollisionAccess().getGeometryAssignment_0()); }
	(rule__Collision__GeometryAssignment_0)
	{ after(grammarAccess.getCollisionAccess().getGeometryAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Collision__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Collision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCollisionAccess().getOriginAssignment_1()); }
	(rule__Collision__OriginAssignment_1)
	{ after(grammarAccess.getCollisionAccess().getOriginAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Origin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__0__Impl
	rule__Origin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getOriginAction_0()); }
	()
	{ after(grammarAccess.getOriginAccess().getOriginAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__1__Impl
	rule__Origin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getOriginKeyword_1()); }
	'Origin'
	{ after(grammarAccess.getOriginAccess().getOriginKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__2__Impl
	rule__Origin__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getXAssignment_2()); }
	(rule__Origin__XAssignment_2)?
	{ after(grammarAccess.getOriginAccess().getXAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__3__Impl
	rule__Origin__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getYAssignment_3()); }
	(rule__Origin__YAssignment_3)?
	{ after(grammarAccess.getOriginAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__4__Impl
	rule__Origin__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getZAssignment_4()); }
	(rule__Origin__ZAssignment_4)?
	{ after(grammarAccess.getOriginAccess().getZAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__5__Impl
	rule__Origin__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getRollAssignment_5()); }
	(rule__Origin__RollAssignment_5)?
	{ after(grammarAccess.getOriginAccess().getRollAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__6__Impl
	rule__Origin__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getPitchAssignment_6()); }
	(rule__Origin__PitchAssignment_6)?
	{ after(grammarAccess.getOriginAccess().getPitchAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Origin__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOriginAccess().getYawAssignment_7()); }
	(rule__Origin__YawAssignment_7)?
	{ after(grammarAccess.getOriginAccess().getYawAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mass__Group__0__Impl
	rule__Mass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassAccess().getMassAction_0()); }
	()
	{ after(grammarAccess.getMassAccess().getMassAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mass__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMassAccess().getMassKeyword_1()); }
	'Mass'
	{ after(grammarAccess.getMassAccess().getMassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Inertia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inertia__Group__0__Impl
	rule__Inertia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInertiaAccess().getInertiaAction_0()); }
	()
	{ after(grammarAccess.getInertiaAccess().getInertiaAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Inertia__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInertiaAccess().getInertiaKeyword_1()); }
	'Inertia'
	{ after(grammarAccess.getInertiaAccess().getInertiaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__0__Impl
	rule__Color__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColorAction_0()); }
	()
	{ after(grammarAccess.getColorAccess().getColorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColorKeyword_1()); }
	'Color'
	{ after(grammarAccess.getColorAccess().getColorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Texture__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Texture__Group__0__Impl
	rule__Texture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Texture__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextureAccess().getTextureAction_0()); }
	()
	{ after(grammarAccess.getTextureAccess().getTextureAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Texture__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Texture__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Texture__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextureAccess().getTextureKeyword_1()); }
	'Texture'
	{ after(grammarAccess.getTextureAccess().getTextureKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Box__Group__0__Impl
	rule__Box__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoxAccess().getBoxAction_0()); }
	()
	{ after(grammarAccess.getBoxAccess().getBoxAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Box__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoxAccess().getBoxKeyword_1()); }
	'Box'
	{ after(grammarAccess.getBoxAccess().getBoxKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cylinder__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cylinder__Group__0__Impl
	rule__Cylinder__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cylinder__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCylinderAccess().getCylinderAction_0()); }
	()
	{ after(grammarAccess.getCylinderAccess().getCylinderAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cylinder__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cylinder__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cylinder__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCylinderAccess().getCylinderKeyword_1()); }
	'Cylinder'
	{ after(grammarAccess.getCylinderAccess().getCylinderKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mesh__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesh__Group__0__Impl
	rule__Mesh__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesh__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeshAccess().getMeshAction_0()); }
	()
	{ after(grammarAccess.getMeshAccess().getMeshAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesh__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mesh__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mesh__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeshAccess().getMeshKeyword_1()); }
	'Mesh'
	{ after(grammarAccess.getMeshAccess().getMeshKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sphere__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sphere__Group__0__Impl
	rule__Sphere__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSphereAccess().getSphereAction_0()); }
	()
	{ after(grammarAccess.getSphereAccess().getSphereAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sphere__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sphere__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSphereAccess().getSphereKeyword_1()); }
	'Sphere'
	{ after(grammarAccess.getSphereAccess().getSphereKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Limit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__0__Impl
	rule__Limit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getLimitAction_0()); }
	()
	{ after(grammarAccess.getLimitAccess().getLimitAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__1__Impl
	rule__Limit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getLimitKeyword_1()); }
	'Limit'
	{ after(grammarAccess.getLimitAccess().getLimitKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__2__Impl
	rule__Limit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getLowerAssignment_2()); }
	(rule__Limit__LowerAssignment_2)?
	{ after(grammarAccess.getLimitAccess().getLowerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__3__Impl
	rule__Limit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getUpperAssignment_3()); }
	(rule__Limit__UpperAssignment_3)?
	{ after(grammarAccess.getLimitAccess().getUpperAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__4__Impl
	rule__Limit__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getEffortAssignment_4()); }
	(rule__Limit__EffortAssignment_4)?
	{ after(grammarAccess.getLimitAccess().getEffortAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Limit__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLimitAccess().getVelocityAssignment_5()); }
	(rule__Limit__VelocityAssignment_5)?
	{ after(grammarAccess.getLimitAccess().getVelocityAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group__0__Impl
	rule__Axis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getAxisAction_0()); }
	()
	{ after(grammarAccess.getAxisAccess().getAxisAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group__1__Impl
	rule__Axis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getAxisKeyword_1()); }
	'Axis'
	{ after(grammarAccess.getAxisAccess().getAxisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group__2__Impl
	rule__Axis__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getGroup_2()); }
	(rule__Axis__Group_2__0)?
	{ after(grammarAccess.getAxisAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group__3__Impl
	rule__Axis__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getGroup_3()); }
	(rule__Axis__Group_3__0)?
	{ after(grammarAccess.getAxisAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getGroup_4()); }
	(rule__Axis__Group_4__0)?
	{ after(grammarAccess.getAxisAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_2__0__Impl
	rule__Axis__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getXKeyword_2_0()); }
	'x'
	{ after(grammarAccess.getAxisAccess().getXKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getXAssignment_2_1()); }
	(rule__Axis__XAssignment_2_1)
	{ after(grammarAccess.getAxisAccess().getXAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_3__0__Impl
	rule__Axis__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getYKeyword_3_0()); }
	'y'
	{ after(grammarAccess.getAxisAccess().getYKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getYAssignment_3_1()); }
	(rule__Axis__YAssignment_3_1)
	{ after(grammarAccess.getAxisAccess().getYAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Axis__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_4__0__Impl
	rule__Axis__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getZKeyword_4_0()); }
	'z'
	{ after(grammarAccess.getAxisAccess().getZKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Axis__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAxisAccess().getZAssignment_4_1()); }
	(rule__Axis__ZAssignment_4_1)
	{ after(grammarAccess.getAxisAccess().getZAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calibration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group__0__Impl
	rule__Calibration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getCalibrationAction_0()); }
	()
	{ after(grammarAccess.getCalibrationAccess().getCalibrationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group__1__Impl
	rule__Calibration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getCalibrationKeyword_1()); }
	'Calibration'
	{ after(grammarAccess.getCalibrationAccess().getCalibrationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group__2__Impl
	rule__Calibration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getGroup_2()); }
	(rule__Calibration__Group_2__0)?
	{ after(grammarAccess.getCalibrationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getGroup_3()); }
	(rule__Calibration__Group_3__0)?
	{ after(grammarAccess.getCalibrationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calibration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group_2__0__Impl
	rule__Calibration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getRisingKeyword_2_0()); }
	'Rising'
	{ after(grammarAccess.getCalibrationAccess().getRisingKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getRisingAssignment_2_1()); }
	(rule__Calibration__RisingAssignment_2_1)
	{ after(grammarAccess.getCalibrationAccess().getRisingAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calibration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group_3__0__Impl
	rule__Calibration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getFallingKeyword_3_0()); }
	'Falling'
	{ after(grammarAccess.getCalibrationAccess().getFallingKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calibration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalibrationAccess().getFallingAssignment_3_1()); }
	(rule__Calibration__FallingAssignment_3_1)
	{ after(grammarAccess.getCalibrationAccess().getFallingAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dynamics__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group__0__Impl
	rule__Dynamics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getDynamicsAction_0()); }
	()
	{ after(grammarAccess.getDynamicsAccess().getDynamicsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group__1__Impl
	rule__Dynamics__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getDynamicsKeyword_1()); }
	'Dynamics'
	{ after(grammarAccess.getDynamicsAccess().getDynamicsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group__2__Impl
	rule__Dynamics__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getGroup_2()); }
	(rule__Dynamics__Group_2__0)?
	{ after(grammarAccess.getDynamicsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getGroup_3()); }
	(rule__Dynamics__Group_3__0)?
	{ after(grammarAccess.getDynamicsAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dynamics__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group_2__0__Impl
	rule__Dynamics__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getFrictionKeyword_2_0()); }
	'Friction'
	{ after(grammarAccess.getDynamicsAccess().getFrictionKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getFrictionAssignment_2_1()); }
	(rule__Dynamics__FrictionAssignment_2_1)
	{ after(grammarAccess.getDynamicsAccess().getFrictionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Dynamics__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group_3__0__Impl
	rule__Dynamics__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getDampingKeyword_3_0()); }
	'Damping'
	{ after(grammarAccess.getDynamicsAccess().getDampingKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dynamics__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDynamicsAccess().getDampingAssignment_3_1()); }
	(rule__Dynamics__DampingAssignment_3_1)
	{ after(grammarAccess.getDynamicsAccess().getDampingAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mimic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group__0__Impl
	rule__Mimic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getMimicAction_0()); }
	()
	{ after(grammarAccess.getMimicAccess().getMimicAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group__1__Impl
	rule__Mimic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getMimicKeyword_1()); }
	'Mimic'
	{ after(grammarAccess.getMimicAccess().getMimicKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group__2__Impl
	rule__Mimic__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getGroup_2()); }
	(rule__Mimic__Group_2__0)?
	{ after(grammarAccess.getMimicAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getGroup_3()); }
	(rule__Mimic__Group_3__0)?
	{ after(grammarAccess.getMimicAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mimic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group_2__0__Impl
	rule__Mimic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getMultiplierKeyword_2_0()); }
	'Multiplier'
	{ after(grammarAccess.getMimicAccess().getMultiplierKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getMultiplierAssignment_2_1()); }
	(rule__Mimic__MultiplierAssignment_2_1)
	{ after(grammarAccess.getMimicAccess().getMultiplierAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mimic__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group_3__0__Impl
	rule__Mimic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getOffSetKeyword_3_0()); }
	'OffSet'
	{ after(grammarAccess.getMimicAccess().getOffSetKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mimic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMimicAccess().getOffSetAssignment_3_1()); }
	(rule__Mimic__OffSetAssignment_3_1)
	{ after(grammarAccess.getMimicAccess().getOffSetAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SafetyController__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__0__Impl
	rule__SafetyController__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSafetyControllerAction_0()); }
	()
	{ after(grammarAccess.getSafetyControllerAccess().getSafetyControllerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__1__Impl
	rule__SafetyController__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSafetyControllerKeyword_1()); }
	'SafetyController'
	{ after(grammarAccess.getSafetyControllerAccess().getSafetyControllerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__2__Impl
	rule__SafetyController__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getGroup_2()); }
	(rule__SafetyController__Group_2__0)?
	{ after(grammarAccess.getSafetyControllerAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__3__Impl
	rule__SafetyController__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getGroup_3()); }
	(rule__SafetyController__Group_3__0)?
	{ after(grammarAccess.getSafetyControllerAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__4__Impl
	rule__SafetyController__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getGroup_4()); }
	(rule__SafetyController__Group_4__0)?
	{ after(grammarAccess.getSafetyControllerAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getGroup_5()); }
	(rule__SafetyController__Group_5__0)?
	{ after(grammarAccess.getSafetyControllerAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SafetyController__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_2__0__Impl
	rule__SafetyController__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitKeyword_2_0()); }
	'SoftLowerLimit'
	{ after(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitAssignment_2_1()); }
	(rule__SafetyController__SoftLowerLimitAssignment_2_1)
	{ after(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SafetyController__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_3__0__Impl
	rule__SafetyController__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitKeyword_3_0()); }
	'SoftUpperLimit'
	{ after(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitAssignment_3_1()); }
	(rule__SafetyController__SoftUpperLimitAssignment_3_1)
	{ after(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SafetyController__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_4__0__Impl
	rule__SafetyController__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getK_positionKeyword_4_0()); }
	'k_position'
	{ after(grammarAccess.getSafetyControllerAccess().getK_positionKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getK_positionAssignment_4_1()); }
	(rule__SafetyController__K_positionAssignment_4_1)
	{ after(grammarAccess.getSafetyControllerAccess().getK_positionAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SafetyController__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_5__0__Impl
	rule__SafetyController__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getK_velocityKeyword_5_0()); }
	'k_velocity'
	{ after(grammarAccess.getSafetyControllerAccess().getK_velocityKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SafetyController__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSafetyControllerAccess().getK_velocityAssignment_5_1()); }
	(rule__SafetyController__K_velocityAssignment_5_1)
	{ after(grammarAccess.getSafetyControllerAccess().getK_velocityAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Robot__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRobotAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__LinkAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getLinkLinkParserRuleCall_2_0()); }
		ruleLink
		{ after(grammarAccess.getRobotAccess().getLinkLinkParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Robot__JointAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRobotAccess().getJointJointParserRuleCall_3_0()); }
		ruleJoint
		{ after(grammarAccess.getRobotAccess().getJointJointParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__InertialAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getInertialInertialParserRuleCall_3_0()); }
		ruleInertial
		{ after(grammarAccess.getLinkAccess().getInertialInertialParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__VisualsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getVisualsVisualParserRuleCall_4_0()); }
		ruleVisual
		{ after(grammarAccess.getLinkAccess().getVisualsVisualParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__CollisionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getCollisionCollisionParserRuleCall_5_0()); }
		ruleCollision
		{ after(grammarAccess.getLinkAccess().getCollisionCollisionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getJointAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_2_0()); }
		ruleJointType
		{ after(grammarAccess.getJointAccess().getTypeJointTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__ChildOfAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getChildOfLinkCrossReference_3_0()); }
		(
			{ before(grammarAccess.getJointAccess().getChildOfLinkSTRINGTerminalRuleCall_3_0_1()); }
			RULE_STRING
			{ after(grammarAccess.getJointAccess().getChildOfLinkSTRINGTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getJointAccess().getChildOfLinkCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__ParentOfAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getParentOfLinkCrossReference_4_0()); }
		(
			{ before(grammarAccess.getJointAccess().getParentOfLinkSTRINGTerminalRuleCall_4_0_1()); }
			RULE_STRING
			{ after(grammarAccess.getJointAccess().getParentOfLinkSTRINGTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getJointAccess().getParentOfLinkCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__LimitAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getLimitLimitParserRuleCall_5_0()); }
		ruleLimit
		{ after(grammarAccess.getJointAccess().getLimitLimitParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__AxisAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getAxisAxisParserRuleCall_6_0()); }
		ruleAxis
		{ after(grammarAccess.getJointAccess().getAxisAxisParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__OriginAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getOriginOriginParserRuleCall_7_0()); }
		ruleOrigin
		{ after(grammarAccess.getJointAccess().getOriginOriginParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__CalibrationAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getCalibrationCalibrationParserRuleCall_8_0()); }
		ruleCalibration
		{ after(grammarAccess.getJointAccess().getCalibrationCalibrationParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__DynamicsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getDynamicsDynamicsParserRuleCall_9_0()); }
		ruleDynamics
		{ after(grammarAccess.getJointAccess().getDynamicsDynamicsParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__MimicAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getMimicMimicParserRuleCall_10_0()); }
		ruleMimic
		{ after(grammarAccess.getJointAccess().getMimicMimicParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__SafetycontrollerAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getSafetycontrollerSafetyControllerParserRuleCall_11_0()); }
		ruleSafetyController
		{ after(grammarAccess.getJointAccess().getSafetycontrollerSafetyControllerParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__OriginAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInertialAccess().getOriginOriginParserRuleCall_0_0()); }
		ruleOrigin
		{ after(grammarAccess.getInertialAccess().getOriginOriginParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__MassAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInertialAccess().getMassMassParserRuleCall_1_0()); }
		ruleMass
		{ after(grammarAccess.getInertialAccess().getMassMassParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Inertial__InertiaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInertialAccess().getInertiaInertiaParserRuleCall_2_0()); }
		ruleInertia
		{ after(grammarAccess.getInertialAccess().getInertiaInertiaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__MaterialAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisualAccess().getMaterialMaterialParserRuleCall_0_0()); }
		ruleMaterial
		{ after(grammarAccess.getVisualAccess().getMaterialMaterialParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__OriginAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisualAccess().getOriginOriginParserRuleCall_1_0()); }
		ruleOrigin
		{ after(grammarAccess.getVisualAccess().getOriginOriginParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual__GeometryAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisualAccess().getGeometryGeometryParserRuleCall_2_0()); }
		ruleGeometry
		{ after(grammarAccess.getVisualAccess().getGeometryGeometryParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collision__GeometryAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollisionAccess().getGeometryGeometryParserRuleCall_0_0()); }
		ruleGeometry
		{ after(grammarAccess.getCollisionAccess().getGeometryGeometryParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collision__OriginAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollisionAccess().getOriginOriginParserRuleCall_1_0()); }
		ruleOrigin
		{ after(grammarAccess.getCollisionAccess().getOriginOriginParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__XAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getXFLOATParserRuleCall_2_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getXFLOATParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getYFLOATParserRuleCall_3_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getYFLOATParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__ZAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getZFLOATParserRuleCall_4_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getZFLOATParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__RollAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getRollFLOATParserRuleCall_5_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getRollFLOATParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__PitchAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getPitchFLOATParserRuleCall_6_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getPitchFLOATParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Origin__YawAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOriginAccess().getYawFLOATParserRuleCall_7_0()); }
		ruleFLOAT
		{ after(grammarAccess.getOriginAccess().getYawFLOATParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__LowerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLimitAccess().getLowerFLOATParserRuleCall_2_0()); }
		ruleFLOAT
		{ after(grammarAccess.getLimitAccess().getLowerFLOATParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__UpperAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLimitAccess().getUpperFLOATParserRuleCall_3_0()); }
		ruleFLOAT
		{ after(grammarAccess.getLimitAccess().getUpperFLOATParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__EffortAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLimitAccess().getEffortFLOATParserRuleCall_4_0()); }
		ruleFLOAT
		{ after(grammarAccess.getLimitAccess().getEffortFLOATParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Limit__VelocityAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLimitAccess().getVelocityFLOATParserRuleCall_5_0()); }
		ruleFLOAT
		{ after(grammarAccess.getLimitAccess().getVelocityFLOATParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__XAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAxisAccess().getXINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAxisAccess().getXINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__YAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAxisAccess().getYINTTerminalRuleCall_3_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAxisAccess().getYINTTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Axis__ZAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAxisAccess().getZINTTerminalRuleCall_4_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAxisAccess().getZINTTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__RisingAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalibrationAccess().getRisingFLOATParserRuleCall_2_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getCalibrationAccess().getRisingFLOATParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calibration__FallingAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalibrationAccess().getFallingFLOATParserRuleCall_3_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getCalibrationAccess().getFallingFLOATParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__FrictionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDynamicsAccess().getFrictionFLOATParserRuleCall_2_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getDynamicsAccess().getFrictionFLOATParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dynamics__DampingAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDynamicsAccess().getDampingFLOATParserRuleCall_3_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getDynamicsAccess().getDampingFLOATParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__MultiplierAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMimicAccess().getMultiplierFLOATParserRuleCall_2_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getMimicAccess().getMultiplierFLOATParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mimic__OffSetAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMimicAccess().getOffSetFLOATParserRuleCall_3_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getMimicAccess().getOffSetFLOATParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__SoftLowerLimitAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitFLOATParserRuleCall_2_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSafetyControllerAccess().getSoftLowerLimitFLOATParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__SoftUpperLimitAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitFLOATParserRuleCall_3_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSafetyControllerAccess().getSoftUpperLimitFLOATParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__K_positionAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSafetyControllerAccess().getK_positionFLOATParserRuleCall_4_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSafetyControllerAccess().getK_positionFLOATParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SafetyController__K_velocityAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSafetyControllerAccess().getK_velocityFLOATParserRuleCall_5_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSafetyControllerAccess().getK_velocityFLOATParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
